<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Lập trình cấu trúc trong Visual Basic</title>
  <metadata>
  <md:content-id>m30184</md:content-id><md:title>Lập trình cấu trúc trong Visual Basic</md:title>
  <md:abstract>Mục tiêu:
Chương này giới thiệu về các cấu trúc lập trình trong VB; đây là các cấu trúc cốt lõi để xây dựng nên một chương trình VB.</md:abstract>
  <md:uuid>d4dd9ef3-dedc-4f95-a778-5fdc467ec508</md:uuid>
</metadata>

<content>
    <para id="id10050591">Học xong chương này, sinh viên phải nắm bắt được các vấn đề sau:</para>
    <para id="id10050605">- Sử dụng môi trường lập trình VB để viết mã lệnh.</para>
    <para id="id10050614">- Các kiểu dữ liệu trong VB.</para>
    <para id="id10050620">- Cách khai báo hằng, biến trong VB.</para>
    <para id="id10050626">- Biểu thức trong VB.</para>
    <para id="id10050631">- Các câu lệnh đơn cũng như các câu lệnh có cấu trúc.</para>
    <para id="id10050640">- Chương trình con trong VB.</para>
    <para id="id10050649">- Bẫy lỗi trong VB.</para>
    <para id="id10050654">Kiến thức có liên quan:</para>
    <para id="id10050666">- Cách sử dụng môi trường phát triển của VB.</para>
    <para id="id10050677">Tài liệu tham khảo:</para>
    <para id="id10050689">- Microsoft Visual Basic 6.0 và Lập trình Cơ sở dữ liệu - Chương 4, trang 49 - Nguyễn Thị Ngọc Mai (chủ biên), Nhà xuất bản Giáo dục - 2000.</para>
    <para id="id10214740">Môi trường lập trình</para>
    <section id="id-036358274117">
      <title>Soạn thảo chương trình:</title>
      <para id="id10214753">Trong Visual Basic IDE, cửa sổ mã lệnh (Code) cho phép soạn thảo chương trình. Cửa sổ này có một số chức năng nổi bật:</para>
      <list id="id10214763" list-type="bulleted">
        <item>Đánh dấu (Bookmarks): Chức năng này cho phép đánh dấu các dòng lệnh của chương trình trong cửa sổ mã lệnh để dễ dàng xem lại về sau này. Để bật tắt khả năng này, chọn Bookmarks từ menu Edit, hoặc chọn từ thanh công cụ Edit.</item>
        <item>Các phím tắt trong cửa sổ mã lệnh:</item>
      </list>
      <table id="id10214786" summary="">
        <tgroup cols="2">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <tbody>
            <row>
              <entry>Chöùc naêng</entry>
              <entry>Phím taét</entry>
            </row>
            <row>
              <entry>Xem cöûa soå Code</entry>
              <entry>F7</entry>
            </row>
            <row>
              <entry>Xem cöûa soå Object Browser</entry>
              <entry>F2</entry>
            </row>
            <row>
              <entry>Tìm kieám</entry>
              <entry>CTRL+F</entry>
            </row>
            <row>
              <entry>Thay theá</entry>
              <entry>CTRL+H</entry>
            </row>
            <row>
              <entry>Tìm tieáp</entry>
              <entry>SHIFT+F4</entry>
            </row>
            <row>
              <entry>Tìm ngöôïc</entry>
              <entry>SHIFT+F3</entry>
            </row>
            <row>
              <entry>Chuyeån ñeán thuû tuïc keá tieáp</entry>
              <entry>CTRL+DOWN ARROW</entry>
            </row>
            <row>
              <entry>Chuyeån ñeán thuû tuïc tröôùc ñoù</entry>
              <entry>CTRL+UP ARROW</entry>
            </row>
            <row>
              <entry>Xem ñònh nghóa</entry>
              <entry>SHIFT+F2</entry>
            </row>
            <row>
              <entry>Cuoän xuoáng moät maøn hình</entry>
              <entry>CTRL+PAGE DOWN</entry>
            </row>
            <row>
              <entry>Cuoän leân moät maøn hình</entry>
              <entry>CTRL+PAGE UP</entry>
            </row>
            <row>
              <entry>Nhaûy veà vò trí tröôùc ñoù</entry>
              <entry>CTRL+SHIFT+F2 </entry>
            </row>
            <row>
              <entry>Trôû veà ñaàu cuûa moâ-ñun</entry>
              <entry>CTRL+HOME</entry>
            </row>
            <row>
              <entry>Ñeán cuoái moâ-ñun</entry>
              <entry>CTRL+END</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="id-0251464788803">
      <title>Các chức năng tự động:</title>
      <list id="id10087949" list-type="bulleted">
        <item>Tự động kiểm tra cú pháp (Auto Syntax Check)</item>
      </list>
      <para id="id10087959">Nếu chức năng này không được bật thì khi ta viết một dòng mã có chứa lỗi, VB chỉ hiển thị dòng chương trình sai với màu đỏ nhưng không kèm theo chú thích gì và tất nhiên ta có thể viết tiếp các dòng lệnh khác. Còn khi chức năng này được bật, VB sẽ cho ta biết một số thông tin về lỗi và hiển thị con trỏ ngay dòng chương trình lỗi để chờ ta sửa.</para>
      <list id="id10087977" list-type="bulleted">
        <item>Yêu cầu khai báo biến (Require Variable Declaration) </item>
      </list>
      <para id="id10087987">VB sẽ thông báo lỗi khi một biến được dùng mà không khai báo và sẽ chỉ ra vị trí của biến đó.</para>
      <para id="id10088001"><figure id="id10088012"><media id="id1165056905290" alt=""><image src=".png" mime-type="image/png" height="278" width="329"/></media></figure>Hình III.1: Cửa sổ Options</para>
      <list id="id10088058" list-type="bulleted">
        <item>Gợi nhớ mã lệnh (Code):</item>
      </list>
      <para id="id10088068">Khả năng Auto List Members: Tự động hiển thị danh sách các thuộc tính và phương thức của 1 điều khiển hay một đối tượng khi ta gõ vào tên của chúng. Chọn thuộc tính hay phương thức cần thao tác và nhấn phím Tab hoặc Space để đưa nó vào chương trình.</para>
      <para id="id10088088"><figure id="id10088098"><media id="id4794275" alt=""><image src=".png" mime-type="image/png" height="303" width="340"/></media></figure>Hình III.2 Cửa sổ Code với khả năng gợi nhớ Code</para>
    </section>
    <section id="id-785703648754">
      <title>Kiểu dữ liệu</title>
      <section id="id-0165878791195">
        <title>Khái niệm </title>
        <para id="id10330511">Kiểu dữ liệu là một tập hợp các giá trị mà một biến của kiểu có thể nhận và một tập hợp các phép toán có thể áp dụng trên các giá trị đó.</para>
      </section>
      <section id="id-882923302927">
        <title>Các kiểu dữ liệu cơ sở trong Visual Basic</title>
        <table id="id10330532" summary="">
          <tgroup cols="2">
            <colspec colnum="1" colname="c1"/>
            <colspec colnum="2" colname="c2"/>
            <tbody>
              <row>
                <entry>Kiểu dữ liệu</entry>
                <entry>Mô tả</entry>
              </row>
              <row>
                <entry>Boolean</entry>
                <entry>Gồm 2 giá trị: TRUE &amp; FALSE.</entry>
              </row>
              <row>
                <entry>Byte</entry>
                <entry>Các giá trị số nguyên từ 0 – 255</entry>
              </row>
              <row>
                <entry>Integer</entry>
                <entry>Các giá trị số nguyên từ -32768 – 32767</entry>
              </row>
              <row>
                <entry>Long</entry>
                <entry>Các giá trị số nguyên từ -2147483648 – 2147483647. Kiểu dữ liệu này thường được gọi là số nguyên dài.</entry>
              </row>
              <row>
                <entry>Single</entry>
                <entry>Các giá trị số thực từ -3.402823E+38 – 3.402823E+38. Kiểu dữ liệu này còn được gọi là độ chính xác đơn.</entry>
              </row>
              <row>
                <entry>Double</entry>
                <entry>Các giá trị số thực từ -1.79769313486232E+308 - 1.79769313486232E+308. Kiểu dữ liệu này được gọi là độ chính xác kép.</entry>
              </row>
              <row>
                <entry>Currency</entry>
                <entry>Dữ liệu tiền tệ chứa các giá trị số từ -922.337.203.685.477,5808 - 922.337.203.685.477,5807.</entry>
              </row>
              <row>
                <entry>String</entry>
                <entry>Chuỗi dữ liệu từ 0 đến 65.500 ký tự hay ký số, thậm chí là các giá trị đặc biệt như ^%@. Giá trị kiểu chuỗi được đặt giữa 2 dấu ngoặc kép (“”).</entry>
              </row>
              <row>
                <entry>Date</entry>
                <entry>Dữ liệu kiểu ngày tháng, giá trị được đặt giữa cặp dấu ##. Việc định dạng hiển thị tùy thuộc vào việc thiết lập trong Control Panel.</entry>
              </row>
              <row>
                <entry>Variant</entry>
                <entry>Chứa mọi giá trị của các kiểu dữ liệu khác, kể cả mảng.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para id="id10148380">Hằng số</para>
      </section>
      <section id="id-690790831087">
        <title>Khái niệm</title>
        <para id="id10148394">Hằng số (Constant) là giá trị dữ liệu không thay đổi.</para>
      </section>
      <section id="id-788721468803">
        <title>Khai báo hằng</title>
        <para id="id10148411">[Public|Private] Const &lt;tên hằng&gt; [As &lt;kiểu dữ liệu&gt;] = &lt;biểu thức&gt;</para>
        <para id="id10148425">Trong đó, tên hằng được đặt giống theo quy tắc đặt tên của điều khiển.</para>
        <para id="id10177415">Ví dụ:</para>
        <para id="id10177420">Const g = 9.8</para>
        <para id="id10177425">Const Num As Integer = 4*5</para>
        <para id="id10177435">Ta có thể dùng cửa sổ Object Browser để xem danh sách các hằng có sẵn của VB và VBA (Visual Basic for Application).</para>
        <para id="id10177444">Trường hợp trùng tên hằng trong những thư viện khác nhau, ta có thể chỉ rõ tham chiếu hằng.</para>
        <para id="id10177456">[&lt;Libname&gt;.][&lt;tên mô-đun&gt;.] &lt;tên hằng&gt;</para>
        <para id="id10177464">Biến</para>
      </section>
      <section id="id-331573497218">
        <title>Khái niệm</title>
        <para id="id10177477">Biến (Variable) là vùng lưu trữ được đặt tên để chứa dữ liệu tạm thời trong quá trình tính toán, so sánh và các công việc khác.</para>
        <para id="id10177488">Biến có 2 đăc điểm:</para>
        <list id="id10177494" list-type="bulleted">
          <item>Mỗi biến có một tên.</item>
          <item>Mỗi biến có thể chứa duy nhất một loại dữ liệu.</item>
        </list>
      </section>
      <section id="id-610922871877">
        <title>Khai báo</title>
        <para id="id10177519">[Public|Private|Static|Dim] &lt;tên biến&gt; [ As &lt;kiểu dữ liệu&gt; ]</para>
        <para id="id10177527">Trong đó, tên biến: là một tên được đặt giống quy tắc đặt tên điều khiển. Nếu cần khai báo nhiều biến trên một dòng thì mỗi khai báo cách nhau dấu phẩy (,).</para>
        <para id="id10177550">Nếu khai báo biến không xác định kiểu dữ liệu thì biến đó có kiểu Variant.</para>
        <para id="id10177558">Khai báo ngầm: Đây là hình thức không cần phải khai báo một biến trước khi sử dụng. Cách dùng này có vẻ thuận tiện nhưng sẽ gây một số sai sót, chẳng hạn khi ta đánh nhầm tên biến, VB sẽ hiểu đó là một biến mới dẫn đến kết quả chương trình sai mà rất khó phát hiện.</para>
        <para id="id10177581">Ví dụ:</para>
        <para id="id10177586">Dim Num As Long, a As Single</para>
        <para id="id10177591">Dim Age As Integer</para>
        <para id="id10177596">Khai báo tường minh: Để tránh rắc rối như đã nêu ở trên, ta nên quy định rằng VB sẽ báo lỗi khi gặp biến chưa được khai báo bằng dòng lệnh:</para>
        <para id="id10177612">Option Explicit trong phần Declaration (khai báo) của mô-đun.</para>
        <para id="id10075374">Option Explicit chỉ có tác dụng trên từng mô-đun do đó ta phải đặt dòng lệnh này trong từng mô-đun của biểu mẫu, mô-đun lớp hay mô-đun chuẩn.</para>
        <para id="id10075384">Biểu thức</para>
      </section>
      <section id="id-0836140054035">
        <title>Khái niệm</title>
        <para id="id10075397">Toán tử hay phép toán (Operator): là từ hay ký hiệu nhằm thực hiện phép tính và xử lý dữ liệu.</para>
        <para id="id10075406">Toán hạng: là giá trị dữ liệu (biến, hằng…).</para>
        <para id="id10075414">Biểu thức: là tập hợp các toán hạng và các toán tử kết hợp lại với nhau theo quy tắc nhất định để tính toán ra một giá trị nào đó.</para>
      </section>
      <section id="id-612360741233">
        <title>Các loại phép toán</title>
        <list id="id10075435" list-type="enumerated">
          <item>Các phép toán số học: Thao tác trên các giá trị có kiểu dữ liệu số.</item>
        </list>
        <table id="id10075454" summary="">
          <tgroup cols="4">
            <colspec colnum="1" colname="c1"/>
            <colspec colnum="2" colname="c2"/>
            <colspec colnum="3" colname="c3"/>
            <colspec colnum="4" colname="c4"/>
            <tbody>
              <row>
                <entry>Phép toán</entry>
                <entry>Ý nghĩa</entry>
                <entry>Kiểu của đối số</entry>
                <entry>Kiểu của kết quả</entry>
              </row>
              <row>
                <entry>-</entry>
                <entry>Phép lấy số đối</entry>
                <entry>Kiểu số (Integer, Single…)</entry>
                <entry>Như kiểu đối số</entry>
              </row>
              <row>
                <entry>+</entry>
                <entry>Phép cộng hai số</entry>
                <entry>Kiểu số (Integer, Single…)</entry>
                <entry>Như kiểu đối số</entry>
              </row>
              <row>
                <entry>-</entry>
                <entry>Phép trừ hai số</entry>
                <entry>Kiểu số (Integer, Single…)</entry>
                <entry>Như kiểu đối số</entry>
              </row>
              <row>
                <entry>*</entry>
                <entry>Phép nhân hai số</entry>
                <entry>Kiểu số (Integer, Single…)</entry>
                <entry>Như kiểu đối số</entry>
              </row>
              <row>
                <entry>/</entry>
                <entry>Phép chia hai số</entry>
                <entry>Kiểu số (Integer, Single…)</entry>
                <entry>Single hay Double</entry>
              </row>
              <row>
                <entry>\</entry>
                <entry>Phép chia lấy phần nguyên</entry>
                <entry>Integer, Long</entry>
                <entry>Integer, Long</entry>
              </row>
              <row>
                <entry>Mod</entry>
                <entry>Phép chia lấy phần dư</entry>
                <entry>Integer, Long</entry>
                <entry>Integer, Long</entry>
              </row>
              <row>
                <entry>^</entry>
                <entry>Tính lũy thừa</entry>
                <entry>Kiểu số (Integer, Single…)</entry>
                <entry>Như kiểu đối số</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <list id="id10134301" list-type="enumerated">
          <item>Các phép toán quan hệ</item>
        </list>
        <para id="id10134313">Đây là các phép toán mà giá trị trả về của chúng là một giá trị kiểu Boolean (TRUE hay FALSE).</para>
        <table id="id10134319" summary="">
          <tgroup cols="2">
            <colspec colnum="1" colname="c1"/>
            <colspec colnum="2" colname="c2"/>
            <tbody>
              <row>
                <entry>Phép toán</entry>
                <entry>Ý nghĩa</entry>
              </row>
              <row>
                <entry>=</entry>
                <entry>So sánh bằng nhau</entry>
              </row>
              <row>
                <entry>&lt;&gt;</entry>
                <entry>So sánh khác nhau</entry>
              </row>
              <row>
                <entry>&gt;</entry>
                <entry>So sánh lớn hơn</entry>
              </row>
              <row>
                <entry>&lt;</entry>
                <entry>So sánh nhỏ hơn</entry>
              </row>
              <row>
                <entry>&gt;=</entry>
                <entry>So sánh lớn hơn hoặc bằng</entry>
              </row>
              <row>
                <entry>&lt;=</entry>
                <entry>So sánh nhỏ hơn hoặc bằng</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <list id="id9896403" list-type="enumerated">
          <item>Các phép toán Logic: là các phép toán tác động trên kiểu Boolean và cho kết quả là kiểu Boolean. Các phép toán này bao gồm AND (và), OR (hoặc), NOT (phủ định). Sau đây là bảng giá trị của các phép toán:</item>
        </list>
        <table id="id9896430" summary="">
          <tgroup cols="5">
            <colspec colnum="1" colname="c1"/>
            <colspec colnum="2" colname="c2"/>
            <colspec colnum="3" colname="c3"/>
            <colspec colnum="4" colname="c4"/>
            <colspec colnum="5" colname="c5"/>
            <tbody>
              <row>
                <entry>X</entry>
                <entry>Y</entry>
                <entry>X AND Y</entry>
                <entry>X OR Y</entry>
                <entry>NOT X</entry>
              </row>
              <row>
                <entry>TRUE</entry>
                <entry>TRUE</entry>
                <entry>TRUE</entry>
                <entry>TRUE</entry>
                <entry>FALSE</entry>
              </row>
              <row>
                <entry>TRUE</entry>
                <entry>FALSE</entry>
                <entry>FALSE</entry>
                <entry>TRUE</entry>
                <entry>FALSE</entry>
              </row>
              <row>
                <entry>FALSE</entry>
                <entry>TRUE</entry>
                <entry>FALSE</entry>
                <entry>TRUE</entry>
                <entry>TRUE</entry>
              </row>
              <row>
                <entry>FALSE</entry>
                <entry>FALSE</entry>
                <entry>FALSE</entry>
                <entry>FALSE</entry>
                <entry>TRUE</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para id="id10197853">Câu lệnh</para>
        <para id="id10197858">Một câu lệnh (statement) xác định một công việc mà chương trình phải thực hiện để xử lý dữ liệu đã được mô tả và khai báo. Các câu lệnh được ngăn cách với nhau bởi ký tự xuống dòng. Ký tự xuống dòng báo hiệu kết thúc một câu lệnh.</para>
      </section>
      <section id="id-321528537636">
        <title>Lệnh gán</title>
        <para id="id10197892">Cú pháp:</para>
        <para id="id10197896">&lt;Tên biến&gt; = &lt;Biểu thức&gt;</para>
        <para id="id9872330">Ví dụ:</para>
        <para id="id9872335">Giả sử ta có khai báo sau:</para>
        <para id="id9872347">Dim TodayTemp As Single, MinAge As Integer</para>
        <para id="id9872361">Dim Sales As Single, NewSales As Single, FullName As String</para>
        <para id="id9872369">Các lệnh sau gán giá trị cho các biến trên:</para>
        <para id="id9872376">TodayTemp = 30.5</para>
        <para id="id9872387">MinAge = 18</para>
        <para id="id9872393">Sales = 200000</para>
        <para id="id9872398">NewSales = Sales * 1.2</para>
        <para id="id9872404">Giả sử người dùng cần nhập họ và tên vào ô nhập liệu TextBox có thuộc tính Name là txtName, câu lệnh dưới đây sẽ lưu giá trị của ô nhập liệu vào trong biến FullName:</para>
        <para id="id9872417">FullName = txtName.Text</para>
        <para id="id9872429">Lưu ý: Kiểu dữ liệu của biểu thức (vế phải của lệnh gán) phải phù hợp với biến ta cần gán trị.</para>
      </section>
      <section id="id-0276135970467">
        <title>Lệnh rẽ nhánh If</title>
        <list id="id9872453" list-type="bulleted">
          <item>Một dòng lệnh:</item>
        </list>
        <para id="id9872462">If &lt;điều kiện&gt; Then &lt;dòng lệnh&gt; </para>
        <list id="id9872504" list-type="bulleted">
          <item>Nhiều dòng lệnh:</item>
        </list>
        <para id="id9872513">If &lt;điều kiện&gt; Then</para>
        <para id="id9872539">Các dòng lệnh</para>
        <para id="id9823496">End If</para>
        <para id="id9823510"/>
        <para id="id9823515">
          <media id="id1165055734933" alt=""><image src="../../media/graphics1-48f7.png" mime-type="image/png" height="275" width="220"/></media>
        </para>
        <para id="id9823549">Trong đó, &lt;điều kiện&gt;: biểu thức mà kết quả trả về kiểu Boolean.</para>
        <para id="id9823558">Ý nghĩa câu lệnh: Các dòng lệnh hay dòng lệnh sẽ được thi hành nếu như điều kiện là đúng. Còn nếu như điều kiện là sai thì câu lệnh tiếp theo sau cấu trúc If ... Then được thi hành.</para>
        <list id="id9823593" list-type="bulleted">
          <item>Dạng đầy đủ: If ... Then ... Else</item>
        </list>
        <para id="id9823617">If &lt;điều kiện 1&gt; Then</para>
        <para id="id9823637">[Khối lệnh 1]</para>
        <para id="id9823641">ElseIf &lt;điều kiện 2&gt; Then</para>
        <para id="id9823661">[Khối lệnh 2]...</para>
        <para id="id9823673">[Else</para>
        <para id="id9823685">[Khối lệnh n]]</para>
        <para id="id9823690">End If</para>
        <para id="id9823696">VB sẽ kiểm tra các điều kiện, nếu điều kiện nào đúng thì khối lệnh tương ứng sẽ được thi hành. Ngược lại nếu không có điều kiện nào đúng thì khối lệnh sau từ khóa Else sẽ được thi hành.</para>
        <para id="id9823704">Ví dụ:</para>
        <para id="id9740731">If (TheColorYouLike = vbRed) Then </para>
        <para id="id9740756">MsgBox "You are a lucky person"</para>
        <para id="id9740770">ElseIf (TheColorYouLike = vbGreen) Then </para>
        <para id="id9740792">MsgBox "You are a hopeful person"</para>
        <para id="id9740807">ElseIf (TheColorYouLike = vbBlue) Then </para>
        <para id="id9740828">MsgBox "You are a brave person"</para>
        <para id="id9740843">ElseIf (TheColorYouLike = vbMagenta) Then </para>
        <para id="id9740865">MsgBox "You are a sad person"</para>
        <para id="id9740879">Else </para>
        <para id="id9740892">MsgBox "You are an average person"</para>
        <para id="id9740907">End If </para>
      </section>
      <section id="id-909965802945">
        <title>Lệnh lựa chọn Select Case</title>
        <para id="id9740934">Trong trường hợp có quá nhiều các điều kiện cần phải kiểm tra, nếu ta dùng cấu trúc rẽ nhánh If…Then thì đoạn lệnh không được trong sáng, khó kiểm tra, sửa đổi khi có sai sót. Ngược lại với cấu trúc Select…Case, biểu thức điều kiện sẽ được tính toán một lần vào đầu cấu trúc, sau đó VB sẽ so sánh kết quả với từng trường hợp (Case). Nếu bằng nó thi hành khối lệnh trong trường hợp (Case) đó.</para>
        <para id="id10340017">Select Case &lt;biểu thức kiểm tra&gt;</para>
        <para id="id10340036">Case &lt;Danh sách kết quả biểu thức 1&gt;</para>
        <para id="id10340056">[Khối lệnh 1]</para>
        <para id="id10340065">Case &lt;Danh sách kết quả biểu thức 2&gt;</para>
        <para id="id10340088">[Khối lệnh 2]</para>
        <para id="id10340097">.</para>
        <para id="id10340111">.</para>
        <para id="id10340123">.</para>
        <para id="id10340136">[Case Else</para>
        <para id="id10340154">[Khối lệnh n]]</para>
        <para id="id10340163">End Select</para>
        <para id="id10330703">Mỗi danh sách kết quả biểu thức sẽ chứa một hoặc nhiều giá trị. Trong trường hợp có nhiều giá trị thì mỗi giá trị cách nhau bởi dấu phẩy (,). Nếu có nhiều Case cùng thỏa điều kiện thì khối lệnh của Case đầu tiên sẽ được thực hiện.</para>
        <para id="id10330729">Ví dụ của lệnh rẽ nhánh If…Then ở trên có thể viết như sau:</para>
        <para id="id10330747">Select Case TheColorYouLike </para>
        <para id="id10330767">Case vbRed </para>
        <para id="id10330779">MsgBox "You are a lucky person"</para>
        <para id="id10330794">Case vbGreen </para>
        <para id="id10330806">MsgBox "You are a hopeful person"</para>
        <para id="id10330822">Case vbBlue </para>
        <para id="id10330833">MsgBox "You are a brave person"</para>
        <para id="id10330849">Case vbMagenta </para>
        <para id="id10330860">MsgBox "You are a sad person"</para>
        <para id="id10330876">Case Else </para>
        <para id="id10330887">MsgBox "You are an average person"</para>
        <para id="id10330903">End Select </para>
        <para id="id9896575">Toán tử Is &amp; To</para>
        <para id="id9896580">Toán tử Is: Được dùng để so sánh &lt;Biểu thức kiểm tra&gt; với một biểu thức nào đó.</para>
        <para id="id9896588">Toán tử To: Dùng để xác lập miền giá trị của &lt;Biểu thức kiểm tra&gt;.</para>
        <para id="id9896594">Ví dụ:</para>
        <para id="id9896599">Select Case Tuoi</para>
        <para id="id9896624">Case Is &lt;18</para>
        <para id="id9896645">MsgBox “Vi thanh nien”</para>
        <para id="id9896653">Case 18 To 30</para>
        <para id="id9896678">MsgBox “Ban da truong thanh, lo lap than di”</para>
        <para id="id9896688">Case 31 To 60</para>
        <para id="id9896713">MsgBox “Ban dang o lua tuoi trung nien”</para>
        <para id="id9896725">Case Else</para>
        <para id="id9896736">MsgBox “Ban da lon tuoi, nghi huu duoc roi day!”</para>
        <para id="id9896745">End Select</para>
        <para id="id9896749">Lưu ý: Trong ví dụ trên không thể viết Case Tuoi &lt; 18.</para>
      </section>
      <section id="id-659544742557">
        <title>Cấu trúc lặp</title>
        <para id="id9896780">Các cấu trúc lặp cho phép thi hành một khối lệnh nào đó nhiều lần.</para>
        <list id="id9896787" list-type="enumerated">
          <item>Lặp không biết trước số lần lặp</item>
        </list>
        <para id="id9889600">Khối lệnhDo ... Loop: Đây là cấu trúc lặp không xác định trước số lần lặp, trong đó, số lần lặp sẽ được quyết định bởi một biểu thức điều kiện. Biểu thức điều kiện phải có kết quả là True hoặc False. Cấu trúc này có 4 kiểu:</para>
        <para id="id9889749">Kiểu 1:</para>
        <para id="id9889761">Do While &lt;điều kiện&gt;</para>
        <para id="id9889783">&lt;khối lệnh&gt; Đkiện</para>
        <para id="id9889795">Loop</para>
        <para id="id9889808"> Đúng Sai </para>
        <para id="id9831301"/>
        <para id="id9831323">Khối lệnh sẽ được thi hành đến khi nào điều kiện không còn đúng nữa. Do biểu thức điều kiện được kiểm tra trước khi thi hành khối lệnh, do đó có thể khối lệnh sẽ không được thực hiện một lần nào cả.</para>
        <para id="id9831340">Kiểu 2:</para>
        <para id="id9831352">Do </para>
        <para id="id9831367">&lt;khối lệnh&gt;</para>
        <para id="id9831376">Loop While &lt;điều kiện&gt;</para>
        <para id="id9831401">Khối lệnh sẽ được thực hiện, sau đó biểu thức điều kiện được kiểm tra, nếu điều kiện còn đúng thì, khối lệnh sẽ được thực hiện tiếp tục. Do biểu thức điều kiện được kiểm tra sau, do đó khối lệnh sẽ được thực hiện ít nhất một lần.</para>
        <para id="id9831419">Kiểu 3:</para>
        <para id="id9831437">Do Until &lt;điều kiện&gt;</para>
        <para id="id9831456">&lt;khối lệnh&gt;</para>
        <para id="id9831465">Loop</para>
        <para id="id9831479">Cũng tương tự như cấu trúc Do While ... Loop nhưng khác biệt ở chỗ là khối lệnh sẽ được thi hành khi điều kiện còn sai.</para>
        <para id="id9831497">Kiểu 4:</para>
        <para id="id9831508">Do </para>
        <para id="id9964103">&lt;khối lệnh&gt;</para>
        <para id="id9964111">Loop Until &lt;điều kiện&gt;</para>
        <para id="id9964137">Khối lệnh được thi hành trong khi điều kiện còn sai và có ít nhất là một lần lặp.</para>
        <para id="id9964148">Ví dụ: Đoạn lệnh dưới đây cho phép kiểm tra một số nguyên N có phải là số nguyên tố hay không?</para>
        <para id="id9964167">Dim i As Integer</para>
        <para id="id9964188">i = 2</para>
        <para id="id9964194">Do While (i &lt;= Sqr(N)) And (N Mod i = 0)</para>
        <para id="id9964221">i = i + 1</para>
        <para id="id9964228">Loop</para>
        <para id="id9964241">If (i &gt; Sqr(N)) And (N &lt;&gt; 1) Then</para>
        <para id="id9964263">MsgBox Str(N) &amp; “ la so nguyen to”</para>
        <para id="id9964272">Else</para>
        <para id="id9964285">MsgBox Str(N) &amp; “ khong la so nguyen to”</para>
        <para id="id9964294">End If</para>
        <para id="id9964307"/>
        <para id="id9964311">Trong đó, hàm Sqr: hàm tính căn bậc hai của một số</para>
        <para id="id10189517">Lặp biết trước số lần lặp</para>
        <list id="id10189521" list-type="bulleted">
          <item>For ... Next</item>
        </list>
        <para id="id10189528">Đây là cấu trúc biết trước số lần lặp, ta dùng biến đếm tăng dần hoặc giảm dần để xác định số lần lặp.</para>
        <para id="id10189538">For &lt;biến đếm&gt; = &lt;điểm đầu&gt; To &lt;điểm cuối&gt; [Step &lt;bước nhảy&gt;]</para>
        <para id="id10189576">[khối lệnh]</para>
        <para id="id10189582">Next </para>
        <para id="id10189587">Biến đếm, điểm đầu, điểm cuối, bước nhảy là những giá trị số (Integer, Single,…). Bước nhảy có thể là âm hoặc dương. Nếu bước nhảy là số âm thì điểm đầu phải lớn hơn điểm cuối, nếu không khối lệnh sẽ không được thi hành.</para>
        <para id="id10189604">Khi Step không được chỉ ra, VB sẽ dùng bước nhảy mặc định là một.</para>
        <para id="id10189615">Ví dụ: Đoạn lệnh sau đây sẽ hiển thị các kiểu chữ hiện có của máy bạn.</para>
        <para id="id10189632">Private Sub Form_Click( )</para>
        <para id="id10189650">Dim i As Integer</para>
        <para id="id10189680">For i = 0 To Screen.FontCount</para>
        <para id="id10189715">MsgBox Screen.Fonts(I)</para>
        <para id="id10189723">Next</para>
        <para id="id10189736">End Sub</para>
        <para id="id10089233">Ví dụ: Tính N!</para>
        <list id="id10089248" list-type="bulleted">
          <item>TextBox: Name:txtNum Bước 1: Thiết kế chương trình có giao diện:</item>
        </list>
        <figure id="id10089344">
          <media id="id1165051607118" alt=""><image src="../../media/graphics2-7b6b.png" mime-type="image/png" height="140" width="364"/></media>
        </figure>
        <para id="id10089372">Label: Name: lblKQ</para>
        <list id="id10089435" list-type="bulleted">
          <item>Bước 2: Sự kiện Command1_Click được xử lý:</item>
        </list>
        <para id="id10089448">Private Sub Command1_Click()</para>
        <para id="id9893936">Dim i As Integer, n As Integer, Kq As Long </para>
        <para id="id9893983">n = Val(txtNum.Text)</para>
        <para id="id9893991">Kq = 1</para>
        <para id="id9893998">For i = 1 To n</para>
        <para id="id9894024">Kq = Kq * i</para>
        <para id="id9894032">Next</para>
        <para id="id9894048">lblKQ.Caption = Str(Kq)</para>
        <para id="id9894056">End Sub</para>
        <list id="id9894060" list-type="bulleted">
          <item>Lưu dự án và chạy chương trình ta được kết quả như hình dưới:</item>
        </list>
        <figure id="id9894075">
          <media id="id1165058934717" alt=""><image src="../../media/graphics3-2065.png" mime-type="image/png" height="140" width="364"/></media>
        </figure>
        <list id="id9894103" list-type="bulleted">
          <item>For Each ... Next</item>
        </list>
        <para id="id9894115">Tương tự vòng lặp For ... Next, nhưng nó lặp khối lệnh theo số phần tử của một tập các đối tượng hay một mảng thay vì theo số lần lặp xác định. Vòng lặp này tiện lợi khi ta không biết chính xác bao nhiêu phần tử trong tập hợp.</para>
        <para id="id9894132">For Each &lt;phần tử&gt; In &lt;nhóm&gt;</para>
        <para id="id9894160">&lt;khối lệnh&gt;</para>
        <para id="id9992177">Next &lt;phần tử&gt;</para>
        <para id="id9992198">Lưu ý:</para>
        <para id="id9992210">- Phần tử trong tập hợp chỉ có thể là biến Variant, biến Object, hoặc một đối tượng trong Object Browser.</para>
        <para id="id9992221">- Phần tử trong mảng chỉ có thể là biến Variant.</para>
        <para id="id9992229">- Không dùng For Each ... Next với mảng chứa kiểu tự định nghĩa vì Variant không chứa kiểu tự định nghĩa.</para>
        <para id="id9992241">Chương trình con</para>
      </section>
      <section id="id-319435301767">
        <title>Khái niệm</title>
        <para id="id9992254">Trong những chương trình lớn, có thể có những đoạn chương trình viết lặp đi lặp lại nhiều lần, để tránh rườm rà và mất thời gian khi viết chương trình người ta thường phân chia chương trình thành nhiều module, mỗi module giải quyết một công việc nào đó. Các module như vậy gọi là các chương trình con.</para>
        <para id="id9992272">Một tiện lợi khác của việc sử dụng chương trình con là ta có thể dễ dàng kiểm tra xác định tính đúng đắn của nó trước khi ráp nối vào chương trình chính và do đó việc xác định sai sót để tiến hành hiệu đính trong chương trình chính sẽ thuận lợi hơn.</para>
        <para id="id9992289">Trong Visual Basic, chương trình con có hai dạng là hàm (Function) và thủ tục (Sub).</para>
        <para id="id9992300">Hàm khác thủ tục ở chỗ hàm trả về cho lệnh gọi một giá trị thông qua tên của nó còn thủ tục thì không. Do vậy ta chỉ dùng hàm khi và chỉ khi thoả mãn đồng thời các yêu cầu sau đây:</para>
        <list id="id9992312" list-type="bulleted">
          <item>Ta muốn nhận lại một kết quả (chỉ một mà thôi) khi gọi chương trình con. </item>
          <item>Ta cần dùng tên chương trình con (có chứa kết quả) để viết trong các biểu thức. </item>
        </list>
        <para id="id9992339">Nếu không thỏa mãn hai điều kiện ấy thì dùng thủ tục.</para>
      </section>
      <section id="id-0937351045687">
        <title>Thủ tục</title>
        <list id="id9992354" list-type="enumerated">
          <item>Khái niệm: </item>
        </list>
        <para id="id9992363">Thủ tục là một chương trình con thực hiện một hay một số tác vụ nào đó. Thủ tục có thể có hay không có tham số.</para>
        <list id="id9992372" list-type="enumerated">
          <item>Khai báo thủ tục</item>
        </list>
        <para id="id9992384">[Private | Public] [Static] Sub &lt;tên thủ tục&gt; [(&lt;tham số&gt;[As &lt;Kiểu tham số&gt;])]</para>
        <para id="id9900612">&lt;Các dòng lệnh&gt; hay &lt;Các khai báo&gt;</para>
        <para id="id9900619">End Sub</para>
        <para id="id9900635"/>
        <para id="id9900639">Trong đó:</para>
        <para id="id9900646">- &lt;Tên thủ tục&gt;: Đây là một tên được đặt giống quy tắc tên biến, hằng,…</para>
        <para id="id9900656">- &lt;tham số&gt;[: &lt;Kiểu tham số&gt;]: có thể có hay không? Nếu có nhiều tham số thì mỗi tham số phân cách nhau dấu phẩy. Nếu không xác định kiểu tham số thì tham số có kiểu Variant.</para>
        <para id="id9900671">Để gọi thủ tục để thực thi, ta có 2 cách:</para>
        <list id="id9900678" list-type="bulleted">
          <item>&lt;Tên thủ tục&gt; [&lt;Các tham số thực tế&gt;]</item>
          <item>Call &lt;Tên thủ tục&gt; ([&lt;Các tham số thực tế&gt;])</item>
        </list>
        <para id="id9900704">Ví dụ: Thiết kế chương trình kiểm tra xem số nguyên N có phải là số nguyên tố hay không?</para>
        <list id="id9900719" list-type="bulleted">
          <item>Bước 1: Thiết kế chương trình có giao diện</item>
        </list>
        <para id="id9900730"><figure id="id9900740"><media id="id4711865" alt=""><image src=".png" mime-type="image/png" height="142" width="340"/></media></figure>TextBox: Name:txtNum</para>
        <list id="id10104972" list-type="bulleted">
          <item>Bước 2: Viết thủ tục KtraNgTo trong phần mã lệnh của Form</item>
        </list>
        <para id="id10104983">Sub KTraNgTo(N As Integer)</para>
        <para id="id10105004">Dim i As Integer</para>
        <para id="id10105026">i = 2</para>
        <para id="id10105033">Do While (i &lt;= Sqr(N)) And (N Mod i &lt;&gt; 0)</para>
        <para id="id10105069">i = i + 1</para>
        <para id="id10105076">Loop </para>
        <para id="id10105097">If (i &gt; Sqr(N)) And (N &lt;&gt; 1) Then</para>
        <para id="id10105128">MsgBox Str(N) &amp; " la so nguyen to"</para>
        <para id="id10105137">Else</para>
        <para id="id10105151">MsgBox Str(N) &amp; " khong la so nguyen to"</para>
        <para id="id10105160">End If</para>
        <para id="id10105174">End Sub</para>
        <list id="id10105178" list-type="bulleted">
          <item>Bước 3: Xử lý sự kiện Command1_Click; trong thủ tục xử lý sự kiện này ta có gọi thủ tục KtraNgTo như sau:</item>
        </list>
        <para id="id10105191">Private Sub Command1_Click()</para>
        <para id="id9827102">KTraNgTo Val(txtNum.Text)</para>
        <para id="id9827110">‘ Call KtraNgTo(Val(txtNum.Text))</para>
        <para id="id9827130">End Sub</para>
        <list id="id9827134" list-type="bulleted">
          <item>Bước 4: Lưu dự án và chạy chương trình. Ta được kết quả sau:</item>
        </list>
        <figure id="id9827156">
          <media id="id1165061812545" alt=""><image src="../../media/graphics4-c42d.png" mime-type="image/png" height="114" width="264"/></media>
        </figure>
        <para id="id9827185">Trong ví dụ trên thay vì gọi thủ tục bằng lời gọi: </para>
        <para id="id9827192">KTraNgTo Val(txtNum.Text)</para>
        <para id="id9827197">Ta có thể sử dụng cách khác:</para>
        <para id="id9827202">Call KtraNgTo(Val(txtNum.Text))</para>
      </section>
      <section id="id-681737127234">
        <title>Hàm</title>
        <list id="id9827231" list-type="enumerated">
          <item>Khái niệm</item>
        </list>
        <para id="id9827240">Hàm (Function) là một chương trình con có nhiệm vụ tính toán và cho ta một kết quả. Kết quả này được trả về trong tên hàm cho lời gọi nó.</para>
        <list id="id9827253" list-type="enumerated">
          <item>Khai báo hàm</item>
        </list>
        <para id="id9827265">[Private | Public | Static] Function &lt;Tên hàm&gt; [(&lt;tham số&gt;[As &lt;Kiểu tham số&gt;])] _</para>
        <para id="id9827290">[As &lt;KIỂU DỮ LIỆU&gt;] </para>
        <para id="id9827307">&lt;Các dòng lệnh&gt; hay &lt;Các khai báo&gt;</para>
        <para id="id9827314">End Function</para>
        <para id="id9827321">Trong đó:</para>
        <para id="id9827328">- &lt;Tên hàm&gt;: Đây là một tên được đặt giống quy tắc tên biến, hằng,…</para>
        <para id="id10090332">- &lt;tham số&gt;[: &lt;Kiểu tham số&gt;]: có thể có hay không? Nếu có nhiều tham số thì mỗi tham số phân cách nhau dấu phẩy. Nếu không xác định kiểu tham số thì tham số có kiểu Variant.</para>
        <para id="id10090348">- &lt;KIỂU DỮ LIỆU&gt;: Kết quả trả về của hàm, trong trường hợp không khai báo As &lt;kiểu dữ liệu&gt;, mặc định, VB hiểu kiểu trả về kiểu Variant.</para>
        <para id="id10090373">Khi gọi hàm để thực thi ta nhận được một kết quả. Cần chú ý khi gọi hàm thực thi ta nhận được một kết quả có kiểu chính là kiểu trả về của hàm (hay là kiểu Variant nếu ta không chỉ rõ kiểu trả về trong định nghĩa hàm). Do đó lời gọi hàm phải là thành phần của một biểu thức.</para>
        <para id="id10090388">Cú pháp gọi hàm thực thi: &lt;Tên hàm&gt;[(tham số)].</para>
        <para id="id10090407">Ví dụ: Tính N!</para>
        <list id="id10090423" list-type="bulleted">
          <item>TextBox: Name:txtNum Bước 1: Thiết kế chương trình có giao diện:</item>
        </list>
        <figure id="id10090514">
          <media id="id1165051126408" alt=""><image src="../../media/graphics5-35ed.png" mime-type="image/png" height="140" width="364"/></media>
        </figure>
        <para id="id10090542">Label: Name: lblKQ</para>
        <list id="id9991229" list-type="bulleted">
          <item>Bước 2: Thêm một hàm vào cửa sổ mã lệnh của Form</item>
        </list>
        <para id="id9991240">Function Giaithua(N As Integer) As Long</para>
        <para id="id9991252">Dim i As Integer, Kq As Long </para>
        <para id="id9991290">Kq = 1</para>
        <para id="id9991297">For i = 1 To n</para>
        <para id="id9991323">Kq = Kq * i</para>
        <para id="id9991330">Next</para>
        <para id="id9991347">Giaithua = Kq</para>
        <para id="id9991355">End Function</para>
        <para id="id9991360">Private Sub Command1_Click()</para>
        <para id="id9991372">Dim n As Integer </para>
        <para id="id9991401">n = Val(txtNum.Text)</para>
        <para id="id9991411">lblKQ.Caption = Str(Giaithua(n))</para>
        <para id="id9837068">End Sub</para>
        <para id="id9837072">Lưu dự án và chạy chương trình ta được kết quả như hình dưới:</para>
        <figure id="id9837082">
          <media id="id1165056932400" alt=""><image src="../../media/graphics6-21a9.png" mime-type="image/png" height="140" width="364"/></media>
        </figure>
        <para id="id9837110">Lưu ý: Do khi gọi hàm ta nhận được một kết quả nên bên trong phần định nghĩa hàm, trước khi kết thúc ta phải gán kết quả trả về của hàm thông qua tên hàm (trong ví dụ trên là dòng lệnh Giaithua = Kq)</para>
        <para id="id9837143">Truy xuất dữ liệu trong Visual Basic</para>
      </section>
      <section id="id-304666199779">
        <title>Các khái niệm</title>
        <list id="id9837157" list-type="bulleted">
          <item>Module:</item>
        </list>
        <para id="id9837166">- Một ứng dụng đơn giản có thể chỉ có một biểu mẫu, lúc đó tất cả mã lệnh của ứng dụng đó được đặt trong cửa sổ mã lệnh của biểu mẫu đó (gọi là Form Module). Khi ứng dụng được phát triển lớn lên, chúng ta có thể có thêm một số biểu mẫu nữa và lúc này khả năng lặp đi lặp lại nhiều lần của một đoạn mã lệnh trong nhiều biểu mẫu khác nhau là rất lớn.</para>
        <para id="id9837180">- Để tránh việc lặp đi lặp lại trên, ta tạo ra một Module riêng rẽ chứa các chương trình con được dùng chung. Visual Basic cho phép 3 loại Module:</para>
        <para id="id9837191">Module biểu mẫu (Form module): đi kèm với mỗi một biểu mẫu là một module của biểu mẫu đó để chứa mã lệnh của biểu mẫu này. Với mỗi điều khiển trên biểu mẫu, module biểu mẫu chứa các chương trình con và chúng sẵn sàng được thực thi để đáp ứng lại các sự kiện mà người sử dụng ứng dụng tác động trên điều khiển. Module biểu mẫu được lưu trong máy tính dưới dạng các tập tin có đuôi là *.frm.</para>
        <para id="id9837222">Module chuẩn (Standard module): Mã lệnh không thuộc về bất cứ một biểu mẫu hay một điều khiển nào sẽ được đặt trong một module đặc biệt gọi là module chuẩn (được lưu với đuôi *.bas). Các chương trình con được lặp đi lặp lại để đáp ứng các sự kiện khác nhau của các điều khiển khác nhau thường được đặt trong module chuẩn. </para>
        <para id="id9837265">Module lớp (Class module): được sử dụng để tạo các điều khiển được gọi thực thi trong một ứng dụng cụ thể. Một module chuẩn chỉ chứa mã lệnh nhưng module lớp chứa cả mã lệnh và dữ liệu, chúng có thể được coi là các điều khiển do người lập trình tạo ra (được lưu với đuôi *.cls).</para>
        <list id="id9899290" list-type="bulleted">
          <item>Phạm vi (scope): xác định số lượng chương trình có thể truy xuất một biến. Một biến sẽ thuộc một trong 3 loại phạm vi:</item>
        </list>
        <para id="id9899311">Phạm vi biến cục bộ.</para>
        <para id="id9899316">Phạm vi biến module.</para>
        <para id="id9899321">Phạm vi biến toàn cục.</para>
      </section>
      <section id="id-344597283198">
        <title>Biến toàn cục</title>
        <list id="id9899335" list-type="bulleted">
          <item>Khái niệm: Biến toàn cục là biến có phạm vi hoạt động trong toàn bộ ứng dụng.</item>
          <item>Khai báo: </item>
        </list>
        <para id="id9899368">Global &lt;Tên biến&gt; [As &lt;Kiểu dữ liệu&gt;]</para>
      </section>
      <section id="id-733884656262">
        <title>Biến cục bộ</title>
        <list id="id9899398" list-type="bulleted">
          <item>Khái niệm: Biến cục bộ là biến chỉ có hiệu lực trong những chương trình mà chúng được định nghĩa.</item>
          <item>Khai báo: </item>
        </list>
        <para id="id9899431">Dim &lt;Tên biến&gt; [As &lt;Kiểu dữ liệu&gt;]</para>
        <list id="id9899453" list-type="bulleted">
          <item>Lưu ý:</item>
        </list>
        <para id="id9899469">Biến cục bộ được định nghĩa bằng từ khóa Dim sẽ kết thúc ngay khi việc thi hành thủ tục kết thúc.</para>
      </section>
      <section id="id-864655078288">
        <title>Biến Module</title>
        <list id="id9899486" list-type="bulleted">
          <item>Khái niệm: Biến Module là biến được định nghĩa trong phần khai báo (General|Declaration) của Module và mặc nhiên phạm vi hoạt động của nó là toàn bộ Module ấy.</item>
          <item>Khai báo: </item>
        </list>
        <para id="id9826446">- Biến Module được khai báo bằng từ khóa Dim hay Private &amp; đặt trong phần khai báo của Module.</para>
        <para id="id9826465">Ví dụ:</para>
        <para id="id9826477">Private Num As Integer</para>
        <para id="id9826497">- Tuy nhiên, các biến Module này có thể được sử dụng bởi các chương trình con trong các Module khác. Muốn thế chúng phải được khai báo là Public trong phân Khai báo (General|Declaration) của Module.</para>
        <para id="id9826510">Ví dụ:</para>
        <para id="id9826522">Public Num As Integer</para>
        <para id="id9826543">Lưu ý: Không thể khai báo biến với từ khóa là Public trong chương trình con.</para>
      </section>
      <section id="id-29000242665">
        <title>Truyền tham số cho chương trình con</title>
        <list id="id9826568" list-type="bulleted">
          <item>Khái niệm</item>
        </list>
        <para id="id9826578">Một chương trình con đôi lúc cần thêm một vài thông tin về trạng thái của đoạn mã lệnh mà nó định nghĩa để thực thi. Những thông tin này là các biến được truyền vào khi gọi chương trình con, các biến này gọi là tham số của chương trình con.</para>
        <para id="id9826592">Có hai cách để truyền tham số cho chương trình con: Truyền bằng giá trị &amp; truyền bằng địa chỉ.</para>
        <list id="id9826600" list-type="bulleted">
          <item>Truyền tham số bằng giá trị</item>
        </list>
        <para id="id9826610">Với cách truyền tham số theo cách này, mỗi khi một tham số được truyền vào, một bản sao của biến đó được tạo ra. Nếu chương trình con có thay đổi giá trị, những thay đổi này chỉ tác động lên bản sao của biến. Trong VB, từ khóa ByVal được dùng để xác định tham số được truyền bằng giá trị. </para>
        <para id="id9826639">Ví dụ: </para>
        <para id="id9826650">Sub Twice (ByVal Num As Integer)</para>
        <para id="id10177176">Num = Num * 2</para>
        <para id="id10177182">Print Num</para>
        <para id="id10177187">End Sub</para>
        <para id="id10177192">Private Sub Form_Click()</para>
        <para id="id10177204">Dim A As Integer</para>
        <para id="id10177224">A = 4</para>
        <para id="id10177230">Print A</para>
        <para id="id10177236">Twice A</para>
        <para id="id10177242">Print A</para>
        <para id="id10177247">End Sub</para>
        <para id="id10177252">Kết quả thực hiện của đoạn chương trình trên:</para>
        <para id="id10177259">4</para>
        <para id="id10177263">8</para>
        <para id="id10177267">4</para>
        <list id="id10177272" list-type="bulleted">
          <item>Truyền tham số bằng địa chỉ</item>
        </list>
        <para id="id10177282">Truyền tham số theo địa chỉ cho phép chương trình con truy cập vào giá trị gốc của biến trong bộ nhớ. Vì thế, giá trị của biến có thể sẽ bị thay đổi bởi đoạn mã lệnh trong chương trình con. Mặc nhiên, trong VB6 các tham số được truyền theo địa chỉ; tuy nhiên ta có thể chỉ định một cách tường minh nhờ vào từ khóa ByRef.</para>
        <para id="id10177297">Ví dụ:</para>
        <para id="id10177308">Sub Twice (Num As Integer)</para>
        <para id="id10177329">Num = Num * 2</para>
        <para id="id10177335">Print Num</para>
        <para id="id10177341">End Sub</para>
        <para id="id10177345">Private Sub Form_Click()</para>
        <para id="id10177358">Dim A As Integer</para>
        <para id="id10177378">A = 4</para>
        <para id="id10177383">Print A</para>
        <para id="id10177389">Twice A</para>
        <para id="id10177395">Print A</para>
        <para id="id10177401">End Sub</para>
        <para id="id9883058">Kết quả thực hiện của đoạn chương trình trên:</para>
        <para id="id9883064">4</para>
        <para id="id9883069">8</para>
        <para id="id9883073">8</para>
        <para id="id9883078">Bẫy lỗi trong Visual Basic</para>
        <para id="id9883083">Các thao tác bẫy các lỗi thực thi của chương trình là cần thiết đối với các ngôn ngữ lập trình. Người lập trình khó kiểm soát hết các tình huống có thể gây ra lỗi. Chẳng hạn người ta khó có thể kiểm tra chặt chẽ việc người dùng đang chép dữ liệu từ đĩa mềm (hay CD) khi chúng không có trong ổ đĩa. Nếu có các thao tác bẫy lỗi ở đây thì tiện cho người lập trình rất nhiều.</para>
        <para id="id9883103">Visual Basic cũng cung cấp cho ta một số cấu trúc để bẫy các lỗi đang thực thi.</para>
        <para id="id9883110">Cú pháp: </para>
        <para id="id9883128">Dạng 1:</para>
        <para id="id9883132">On Error GoTo &lt;Tên nhãn&gt;</para>
        <para id="id9883150">&lt;Các câu lệnh có thể gây ra lỗi&gt;</para>
        <para id="id9883168">&lt;Tên nhãn&gt;:</para>
        <para id="id9883189">&lt;Các câu lệnh xử lý lỗi&gt;</para>
        <para id="id9883208">Ý nghĩa:</para>
        <para id="id9883213">- &lt;Tên nhãn&gt;: là một tên được đặt theo quy tắc của một danh biểu.</para>
        <para id="id9883221">- Nếu một lệnh trong &lt;Các câu lệnh có thể gây ra lỗi&gt; thì khi chương trình thực thi đến câu lệnh đó, chương trình sẽ tự động nhảy đến đoạn chương trình định nghĩa bên dưới &lt;Tên nhãn&gt; để thực thi.</para>
        <para id="id9883239">Dạng 2:</para>
        <para id="id9883251">On Error Resume Next</para>
        <para id="id9883264">&lt;Các câu lệnh có thể gây ra lỗi&gt;</para>
        <para id="id9883285">Ý nghĩa:</para>
        <para id="id9883289">- Nếu một lệnh trong &lt;Các câu lệnh có thể gây ra lỗi&gt; thì khi chương trình thực thi đến câu lệnh đó, chương trình sẽ tự động bỏ qua câu lệnh bị lỗi và thực thi câu lệnh kế tiếp.</para>
      </section>
    </section>
  </content>
</document>