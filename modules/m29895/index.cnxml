<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Các thành phần cơ bản của ngôn ngữ C</title>
  <metadata>
  <md:content-id>m29895</md:content-id><md:title>Các thành phần cơ bản của ngôn ngữ C</md:title>
  <md:abstract>Học xong chương này, sinh viên sẽ nắm được các vấn đề sau: 
- Bộ chữ viết trong C.
- Các từ khóa.
- Danh biểu.
- Các kiểu dữ liệu
- Biến và các biểu thức trong C.
- Cấu trúc của một chương trình viết bằng ngôn ngữ lập trình C</md:abstract>
  <md:uuid>c47b15fa-5c17-4725-a14d-1284e4bd2a95</md:uuid>
</metadata>

<content>
    <section id="id-494084673709">
      <title>Bộ chữ viết trong C</title>
      <para id="id6569830">Bộ chữ viết trong ngôn ngữ C bao gồm những ký tự, ký hiệu sau: (phân biệt chữ in hoa và in thường):</para>
      <list id="id6569850" list-type="bulleted">
        <item>26 chữ cái latinh lớn A,B,C...Z</item>
        <item>26 chữ cái latinh nhỏ a,b,c ...z.</item>
        <item>10 chữ số thập phân 0,1,2...9.</item>
        <item>Các ký hiệu toán học: +, -, *, /, =, &lt;, &gt;, (, )</item>
        <item>Các ký hiệu đặc biệt: :. , ; " ' _ @ # $ ! ^ [ ] { } ...</item>
        <item>Dấu cách hay khoảng trống. </item>
      </list>
    </section>
    <section id="id-231981933996">
      <title>Các từ khoá trong C</title>
      <para id="id6569919">Từ khóa là các từ dành riêng (reserved words) của C mà người lập trình có thể sử dụng nó trong chương trình tùy theo ý nghĩa của từng từ. Ta không được dùng từ khóa để đặt cho các tên của riêng mình. Các từ khóa của Turbo C 3.0 bao gồm:</para>
      <para id="id6569936">asm auto break case cdecl char</para>
      <para id="id6569968">class const continue _cs default delete</para>
      <para id="id7103598">do double _ds else enum _es</para>
      <para id="id7103632">extern _export far _fastcall float for</para>
      <para id="id7103664">friend goto huge if inline int</para>
      <para id="id7103695">interrupt _loadds long near new operator</para>
      <para id="id7103727">pascal private protected public register return</para>
      <para id="id7103759">_saveregs _seg short signed sizeof _ss</para>
      <para id="id7103790">static struct switch template this typedef</para>
      <para id="id7103822">union unsigned virtual void volatile while</para>
    </section>
    <section id="id-604079134553">
      <title>Cặp dấu ghi chú thích</title>
      <para id="id7103872">Khi viết chương trình đôi lúc ta cần phải có vài lời ghi chú về 1 đoạn chương trình nào đó để dễ nhớ và dễ điều chỉnh sau này; nhất là phần nội dung ghi chú phải không thuộc về chương trình (khi biên dịch phần này bị bỏ qua). Trong ngôn ngữ lập trình C, nội dung chú thích phải được viết trong cặp dấu /* và */.</para>
      <para id="id7103891">Ví dụ :</para>
      <para id="id7103903">#include &lt;stdio.h&gt;</para>
      <para id="id7103907">#include&lt;conio.h&gt;</para>
      <para id="id7103912">int main ()</para>
      <para id="id7103919">{</para>
      <para id="id7103923">char ten[50]; /* khai bao bien ten kieu char 50 ky tu */</para>
      <para id="id7103932">/*Xuat chuoi ra man hinh*/</para>
      <para id="id7103945">printf(“Xin cho biet ten cua ban !”); </para>
      <para id="id7103954">scanf(“%s”,ten); /*Doc vao 1 chuoi la ten cua ban*/</para>
      <para id="id7103963">printf(“Xin chao ban %s\n ”,ten); </para>
      <para id="id7103972">printf(“Chao mung ban den voi Ngon ngu lap trinh C”);</para>
      <para id="id7103980">/*Dung chuong trinh, cho go phim*/</para>
      <para id="id7103988">getch(); </para>
      <para id="id7103992">return 0;</para>
      <para id="id7103998">}</para>
    </section>
    <section id="id-867027255007">
      <title>CÁC KIỂU DỮ LIỆU SƠ CẤP CHUẨN TRONG C</title>
      <para id="id7104011">Các kiểu dữ liệu sơ cấp chuẩn trong C có thể được chia làm 2 dạng : kiểu số nguyên, kiểu số thực.</para>
      <section id="id-834252848039">
        <title>Kiểu số nguyên</title>
        <para id="id7104027">Kiểu số nguyên là kiểu dữ liệu dùng để lưu các giá trị nguyên hay còn gọi là kiểu đếm được. Kiểu số nguyên trong C được chia thành các kiểu dữ liệu con, mỗi kiểu có một miền giá trị khác nhau</para>
        <section id="id-793678302383">
          <title>Kiểu số nguyên 1 byte (8 bits)</title>
          <para id="id7104049">Kiểu số nguyên một byte gồm có 2 kiểu sau:</para>
          <table id="id7104055" summary="">
            <tgroup cols="3">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <colspec colnum="3" colname="c3"/>
              <tbody>
                <row>
                  <entry>STT</entry>
                  <entry>Kiểu dữ liệu</entry>
                  <entry>Miền giá trị (Domain)</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>unsigned char</entry>
                  <entry>Từ 0 đến 255 (tương đương 256 ký tự trong bảng mã ASCII)</entry>
                </row>
                <row>
                  <entry>2</entry>
                  <entry>char</entry>
                  <entry>Từ -128 đến 127</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id7104233">Kiểu unsigned char: lưu các số nguyên dương từ 0 đến 255. </para>
          <para id="id7104247">=&gt; Để khai báo một biến là kiểu ký tự thì ta khai báo biến kiểu unsigned char. Mỗi số trong miền giá trị của kiểu unsigned char tương ứng với một ký tự trong bảng mã ASCII .</para>
          <para id="id7104258">Kiểu char: lưu các số nguyên từ -128 đến 127. Kiểu char sử dụng bit trái nhất để làm bit dấu.</para>
          <para id="id7104274">=&gt; Nếu gán giá trị &gt; 127 cho biến kiểu char thì giá trị của biến này có thể là số âm (?).</para>
        </section>
        <section id="id-976406123904">
          <title>Kiểu số nguyên 2 bytes (16 bits)</title>
          <para id="id7104295">Kiểu số nguyên 2 bytes gồm có 4 kiểu sau:</para>
          <table id="id7104301" summary="">
            <tgroup cols="3">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <colspec colnum="3" colname="c3"/>
              <tbody>
                <row>
                  <entry>STT</entry>
                  <entry>Kiểu dữ liệu</entry>
                  <entry>Miền giá trị (Domain)</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>enum</entry>
                  <entry>Từ -32,768 đến 32,767</entry>
                </row>
                <row>
                  <entry>2</entry>
                  <entry>unsigned int</entry>
                  <entry>Từ 0 đến 65,535</entry>
                </row>
                <row>
                  <entry>3</entry>
                  <entry>short int</entry>
                  <entry>Từ -32,768 đến 32,767</entry>
                </row>
                <row>
                  <entry>4</entry>
                  <entry>int</entry>
                  <entry>Từ -32,768 đến 32,767</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id7104519">Kiểu enum, short int, int : Lưu các số nguyên từ -32768 đến 32767. Sử dụng bit bên trái nhất để làm bit dấu. </para>
          <para id="id7104532">=&gt; Nếu gán giá trị &gt;32767 cho biến có 1 trong 3 kiểu trên thì giá trị của biến này có thể là số âm.</para>
          <para id="id7104542">Kiểu unsigned int: Kiểu unsigned int lưu các số nguyên dương từ 0 đến 65535.</para>
        </section>
        <section id="id-399115342863">
          <title>Kiểu số nguyên 4 byte (32 bits)</title>
          <para id="id7104566">Kiểu số nguyên 4 bytes hay còn gọi là số nguyên dài (long) gồm có 2 kiểu sau:</para>
          <table id="id7104573" summary="">
            <tgroup cols="3">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <colspec colnum="3" colname="c3"/>
              <tbody>
                <row>
                  <entry>STT</entry>
                  <entry>Kiểu dữ liệu</entry>
                  <entry>Miền giá trị (Domain)</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>unsigned long</entry>
                  <entry>Từ 0 đến 4,294,967,295</entry>
                </row>
                <row>
                  <entry>2</entry>
                  <entry>long </entry>
                  <entry>Từ -2,147,483,648 đến 2,147,483,647</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id7104732">Kiểu long : Lưu các số nguyên từ -2147483658 đến 2147483647. Sử dụng bit bên trái nhất để làm bit dấu. </para>
          <para id="id7104744">=&gt; Nếu gán giá trị &gt;2147483647 cho biến có kiểu long thì giá trị của biến này có thể là số âm.</para>
          <para id="id7104757">Kiểu unsigned long: Kiểu unsigned long lưu các số nguyên dương từ 0 đến 4294967295</para>
        </section>
      </section>
      <section id="id-268775614934">
        <title>Kiểu số thực</title>
        <para id="id7104782">Kiểu số thực dùng để lưu các số thực hay các số có dấu chấm thập phân gồm có 3 kiểu sau:</para>
        <table id="id7104791" summary="">
          <tgroup cols="4">
            <colspec colnum="1" colname="c1"/>
            <colspec colnum="2" colname="c2"/>
            <colspec colnum="3" colname="c3"/>
            <colspec colnum="4" colname="c4"/>
            <tbody>
              <row>
                <entry>STT</entry>
                <entry>Kiểu dữ liệu</entry>
                <entry>Kích thước (Size)</entry>
                <entry>Miền giá trị (Domain)</entry>
              </row>
              <row>
                <entry>1</entry>
                <entry>float </entry>
                <entry>4 bytes</entry>
                <entry>Từ 3.4 * 10-38 đến 3.4 * 1038</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>double </entry>
                <entry>8 bytes</entry>
                <entry>Từ 1.7 * 10-308 đến 1.7 * 10308</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>long double</entry>
                <entry>10 bytes</entry>
                <entry>Từ 3.4 *10-4932 đến 1.1 *104932</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para id="id7105080">Mỗi kiểu số thực ở trên đều có miền giá trị và độ chính xác (số số lẻ) khác nhau. Tùy vào nhu cầu sử dụng mà ta có thể khai báo biến thuộc 1 trong 3 kiểu trên. </para>
        <para id="id7105095">Ngoài ra ta còn có kiểu dữ liệu void, kiểu này mang ý nghĩa là kiểu rỗng không chứa giá trị gì cả.</para>
      </section>
    </section>
    <section id="id-470752141546">
      <title>Tên và hằng trong C</title>
      <section id="id-638005233526">
        <title>Tên (danh biểu)</title>
        <para id="id7105135">Tên hay còn gọi là danh biểu (identifier) được dùng để đặt cho chương trình, hằng, kiểu, biến, chương trình con... Tên có hai loại là tên chuẩn và tên do người lập trình đặt.</para>
        <para id="id6562190">Tên chuẩn là tên do C đặt sẵn như tên kiểu: int, char, float,…; tên hàm: sin, cos...</para>
        <para id="id6562201">Tên do người lập trình tự đặt để dùng trong chương trình của mình. Sử dụng bộ chữ cái, chữ số và dấu gạch dưới (_) để đặt tên, nhưng phải tuân thủ quy tắc:</para>
        <list id="id6562215" list-type="bulleted">
          <item>Bắt đầu bằng một chữ cái hoặc dấu gạch dưới.</item>
          <item>Không có khoảng trống ở giữa tên.</item>
          <item>Không được trùng với từ khóa.</item>
          <item>Độ dài tối đa của tên là không giới hạn, tuy nhiên chỉ có 31 ký tự đầu tiên là có ý nghĩa.</item>
          <item>Không cấm việc đặt tên trùng với tên chuẩn nhưng khi đó ý nghĩa của tên chuẩn không còn giá trị nữa.</item>
        </list>
        <para id="id6562269">Ví dụ: tên do người lập trình đặt: Chieu_dai, Chieu_Rong, Chu_Vi, Dien_Tich</para>
        <para id="id6562284">Tên không hợp lệ: Do Dai, 12A2,…</para>
      </section>
      <section id="id-174686183347">
        <title>Hằng (Constant)</title>
        <para id="id6562299">Là đại lượng không đổi trong suốt quá trình thực thi của chương trình.</para>
        <para id="id6562311">Hằng có thể là một chuỗi ký tự, một ký tự, một con số xác định. Chúng có thể được biểu diễn hay định dạng (Format) với nhiều dạng thức khác nhau.</para>
        <section id="id-723057197699">
          <title>Hằng số thực</title>
          <para id="id6562332">Số thực bao gồm các giá trị kiểu float, double, long double được thể hiện theo 2 cách sau:</para>
          <para id="id6562344">- Cách 1: Sử dụng cách viết thông thường mà chúng ta đã sử dụng trong các môn Toán, Lý, …Điều cần lưu ý là sử dụng dấu thập phân là dấu chấm (.);</para>
          <para id="id6562367">Ví dụ: 123.34-223.3333.00-56.0</para>
          <para id="id6562388">- Cách 2: Sử dụng cách viết theo số mũ hay số khoa học. Một số thực được tách làm 2 phần, cách nhau bằng ký tự e hay E</para>
          <para id="id6562411">Phần giá trị: là một số nguyên hay số thực được viết theo cách 1.</para>
          <para id="id6562431">Phần mũ: là một số nguyên</para>
          <para id="id6562449">Giá trị của số thực là: Phần giá trị nhân với 10 mũ phần mũ.</para>
          <para id="id6562468">Ví dụ: 1234.56e-3= 1.23456 (là số 1234.56 * 10-3)</para>
          <para id="id6562497"> -123.45E4 = -1234500 ( là -123.45 *104)</para>
        </section>
        <section id="id-851892070382">
          <title>Hằng số nguyên</title>
          <para id="id6562530">Số nguyên gồm các kiểu int (2 bytes) , long (4 bytes) được thể hiện theo những cách sau.</para>
          <para id="id6562539">- Hằng số nguyên 2 bytes (int) hệ thập phân: Là kiểu số mà chúng ta sử dụng thông thường, hệ thập phân sử dụng các ký số từ 0 đến 9 để biểu diễn một giá trị nguyên.</para>
          <para id="id6562571">Ví dụ: 123 ( một trăm hai mươi ba), -242 ( trừ hai trăm bốn mươi hai).</para>
          <para id="id6562589">- Hằng số nguyên 2 byte (int) hệ bát phân: Là kiểu số nguyên sử dụng 8 ký số từ 0 đến 7 để biểu diễn một số nguyên.</para>
          <para id="id6562610">Cách biểu diễn: 0&lt;các ký số từ 0 đến 7&gt;</para>
          <para id="id6562625">Ví dụ : 0345 (số 345 trong hệ bát phân) </para>
          <para id="id6562649">-020 (số -20 trong hệ bát phân)</para>
          <para id="id6562654">Cách tính giá trị thập phân của số bát phân như sau:</para>
          <para id="id6562668">Số bát phân : 0dndn-1dn-2…d1d0 ( di có giá trị từ 0 đến 7)</para>
          <para id="id6562729">=&gt; Giá trị thập phân=
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mrow><m:munderover><m:mo stretchy="false">∑</m:mo><m:mstyle fontsize="8pt"><m:mrow><m:mrow><m:mi>i</m:mi><m:mo stretchy="false">=</m:mo><m:mn>0</m:mn></m:mrow></m:mrow></m:mstyle><m:mstyle fontsize="8pt"><m:mrow><m:mi>n</m:mi></m:mrow></m:mstyle></m:munderover><m:mrow><m:msub><m:mi>d</m:mi><m:mstyle fontsize="8pt"><m:mrow><m:mi>i</m:mi></m:mrow></m:mstyle></m:msub><m:mo stretchy="false">∗</m:mo><m:msup><m:mn>8</m:mn><m:mstyle fontsize="8pt"><m:mrow><m:mi>i</m:mi></m:mrow></m:mstyle></m:msup></m:mrow></m:mrow></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{ Sum cSub { size 8{i=0} }  cSup { size 8{n} }  {d rSub { size 8{i} } *8 rSup { size 8{i} } } } {}</m:annotation></m:semantics></m:math></para>
          <para id="id6562835">0345=229 , 020=16</para>
          <para id="id6562849">- Hằng số nguyên 2 byte (int) hệ thập lục phân: Là kiểu số nguyên sử dụng 10 ký số từ 0 đến 9 và 6 ký tự A, B, C, D, E ,F để biểu diễn một số nguyên.</para>
          <para id="id6562872">Ký tự  giá trị</para>
          <para id="id6562881">A10</para>
          <para id="id6562890">B11</para>
          <para id="id6562899">C12</para>
          <para id="id6562908">D13</para>
          <para id="id6562917">E14</para>
          <para id="id6562926">F15</para>
          <para id="id6562934">Cách biểu diễn: 0x&lt;các ký số từ 0 đến 9 và 6 ký tự từ A đến F&gt;</para>
          <para id="id6562949">Ví dụ:</para>
          <para id="id6562961">0x345 (số 345 trong hệ 16)</para>
          <para id="id6562966">0x20 (số 20 trong hệ 16)</para>
          <para id="id6562971">0x2A9 (số 2A9 trong hệ 16)</para>
          <para id="id6562977">Cách tính giá trị thập phân của số thập lục phân như sau:</para>
          <para id="id6562991">Số thập lục phân : 0xdndn-1dn-2…d1d0 ( di từ 0 đến 9 hoặc A đến F)</para>
          <para id="id6563052">=&gt; Giá trị thập phân=
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mrow><m:munderover><m:mo stretchy="false">∑</m:mo><m:mstyle fontsize="8pt"><m:mrow><m:mrow><m:mi>i</m:mi><m:mo stretchy="false">=</m:mo><m:mn>0</m:mn></m:mrow></m:mrow></m:mstyle><m:mstyle fontsize="8pt"><m:mrow><m:mi>n</m:mi></m:mrow></m:mstyle></m:munderover><m:mrow><m:msub><m:mi>d</m:mi><m:mstyle fontsize="8pt"><m:mrow><m:mi>i</m:mi></m:mrow></m:mstyle></m:msub><m:mo stretchy="false">∗</m:mo><m:msup><m:mtext>16</m:mtext><m:mstyle fontsize="8pt"><m:mrow><m:mi>i</m:mi></m:mrow></m:mstyle></m:msup></m:mrow></m:mrow></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{ Sum cSub { size 8{i=0} }  cSup { size 8{n} }  {d rSub { size 8{i} } *"16" rSup { size 8{i} } } } {}</m:annotation></m:semantics></m:math></para>
          <para id="id6563157">0x345=827 , 0x20=32 , 0x2A9= 681</para>
          <para id="id6563175">- Hằng số nguyên 4 byte (long): Số long (số nguyên dài) được biểu diễn như số int trong hệ thập phân và kèm theo ký tự l hoặc L. Một số nguyên nằm ngoài miền giá trị của số int ( 2 bytes) là số long ( 4 bytes).</para>
          <para id="id6563210">Ví dụ: 45345L hay 45345l hay 45345</para>
          <para id="id6563235">- Các hằng số còn lại: Viết như cách viết thông thường (không có dấu phân cách giữa 3 số)</para>
          <para id="id6563255">Ví dụ:</para>
          <para id="id6563268">12 (mười hai)</para>
          <para id="id6563279">12.45 (mười hai chấm 45)</para>
          <para id="id6563285">1345.67 (một ba trăm bốn mươi lăm chấm sáu mươi bảy)</para>
        </section>
        <section id="id-925418764246">
          <title>Hằng ký tự</title>
          <para id="id6563301">Hằng ký tự là một ký tự riêng biệt được viết trong cặp dấu nháy đơn (‘). Mỗi một ký tự tương ứng với một giá trị trong bảng mã ASCII. Hằng ký tự cũng được xem như trị số nguyên.</para>
          <para id="id6563315">Ví dụ: ‘a’, ‘A’, ‘0’, ‘9’</para>
          <para id="id6563333">Chúng ta có thể thực hiện các phép toán số học trên 2 ký tự (thực chất là thực hiện phép toán trên giá trị ASCII của chúng)</para>
        </section>
        <section id="id-143303219664">
          <title>Hằng chuỗi ký tự</title>
          <para id="id6563353">Hằng chuỗi ký tự là một chuỗi hay một xâu ký tự được đặt trong cặp dấu nháy kép (“). </para>
          <para id="id6563362">Ví dụ: “Ngon ngu lap trinh C”, “Khoa CNTT-DHCT”, “NVLinh-DVHieu”</para>
          <para id="id6563378">Chú ý: </para>
          <para id="id6563390">1. Một chuỗi không có nội dung “” được gọi là chuỗi rỗng. </para>
          <para id="id6563397">2. Khi lưu trữ trong bộ nhớ, một chuỗi được kết thúc bằng ký tự NULL (‘\0’: mã Ascii là 0).</para>
          <para id="id6563410">3. Để biểu diễn ký tự đặc biệt bên trong chuỗi ta phải thêm dấu \ phía trước.</para>
          <para id="id6563420">Ví dụ: “I’m a student” phải viết “I\’m a student”</para>
          <para id="id6563440">“Day la ky tu “dac biet”” phải viết “Day la ky tu \”dac biet\”“</para>
        </section>
      </section>
    </section>
    <section id="id-887078294902">
      <title>BIẾN VÀ BIỂU THỨC</title>
      <section id="id-809337961203">
        <title>Biến</title>
        <para id="id6563482">Biến là một đại lượng được người lập trình định nghĩa và được đặt tên thông qua việc khai báo biến. Biến dùng để chứa dữ liệu trong quá trình thực hiện chương trình và giá trị của biến có thể bị thay đổi trong quá trình này. Cách đặt tên biến giống như cách đặt tên đã nói trong phần trên.</para>
        <para id="id6563501">Mỗi biến thuộc về một kiểu dữ liệu xác định và có giá trị thuộc kiểu đó.</para>
        <section id="id-339020340991">
          <title>Cú pháp khai báo biến:</title>
          <para id="id6563517">&lt;Kiểu dữ liệu&gt; Danh sách các tên biến cách nhau bởi dấu phẩy;</para>
          <para id="id6563537">Ví dụ:</para>
          <para id="id6563549">int a, b, c;  /*Ba biến a, b,c có kiểu int*/</para>
          <para id="id6563565">long int chu_vi; /*Biến chu_vi có kiểu long*/</para>
          <para id="id6563578">float nua_chu_vi; /*Biến nua_chu_vi có kiểu float*/</para>
          <para id="id6563591">double dien_tich; /*Biến dien_tich có kiểu double*/</para>
          <para id="id6563602">Lưu ý: Để kết thúc 1 lệnh phải có dấu chấm phẩy (;) ở cuối lệnh.</para>
        </section>
        <section id="id-150855075099">
          <title>Vị trí khai báo biến trong C</title>
          <para id="id6563627">Trong ngôn ngữ lập trình C, ta phải khai báo biến đúng vị trí. Nếu khai báo (đặt các biến) không đúng vị trí sẽ dẫn đến những sai sót ngoài ý muốn mà người lập trình không lường trước (hiệu ứng lề). Chúng ta có 2 cách đặt vị trí của biến như sau:</para>
          <para id="id6563646">a) Khai báo biến ngoài: Các biến này được đặt bên ngoài tất cả các hàm và nó có tác dụng hay ảnh hưởng đến toàn bộ chương trình (còn gọi là biến toàn cục).</para>
          <para id="id6563674">Ví dụ:</para>
          <para id="id6563686">int i; /*Bien ben ngoai */</para>
          <para id="id6563697">float pi; /*Bien ben ngoai*/</para>
          <para id="id6563711">int main()</para>
          <para id="id6563717">{ … }</para>
          <para id="id6563722">b) Khai báo biến trong: Các biến được đặt ở bên trong hàm, chương trình chính hay một khối lệnh. Các biến này chỉ có tác dụng hay ảnh hưởng đến hàm, chương trình hay khối lệnh chứa nó. Khi khai báo biến, phải đặt các biến này ở đầu của khối lệnh, trước các lệnh gán, …</para>
          <para id="id6563764">Ví dụ 1:</para>
          <para id="id6563776">#include &lt;stdio.h&gt;</para>
          <para id="id6563781">#include&lt;conio.h&gt;</para>
          <para id="id6563786">int bienngoai;/*khai bao bien ngoai*/</para>
          <para id="id6563797">int main ()</para>
          <para id="id6563804">{ int j,i;/*khai bao bien ben trong chuong trinh chinh*/</para>
          <para id="id6563815">clrscr();</para>
          <para id="id6563821">i=1; j=2;</para>
          <para id="id6563826">bienngoai=3;</para>
          <para id="id6563832">printf("\n Gia7 tri cua i la %d",i); </para>
          <para id="id6563840">/*%d là số nguyên, sẽ biết sau */</para>
          <para id="id6563846">printf("\n Gia tri cua j la %d",j);</para>
          <para id="id6563854">printf("\n Gia tri cua bienngoai la %d",bienngoai);</para>
          <para id="id6563863">getch();</para>
          <para id="id6563875">return 0;</para>
          <para id="id6563880">}</para>
          <para id="id6563884">Ví dụ 2:</para>
          <para id="id6563896">#include &lt;stdio.h&gt;</para>
          <para id="id6563901">#include&lt;conio.h&gt;</para>
          <para id="id6563905">int main ()</para>
          <para id="id6563912">{ int i, j;/*Bien ben trong*/</para>
          <para id="id6563925">clrscr();</para>
          <para id="id6563931">i=4; j=5;</para>
          <para id="id6563936">printf("\n Gia tri cua i la %d",i);</para>
          <para id="id6563942">printf("\n Gia tri cua j la %d",j);</para>
          <para id="id6563953">if(j&gt;i)</para>
          <para id="id6563964">{</para>
          <para id="id6563973">int hieu=j-i; /*Bien ben trong */</para>
          <para id="id6563986">printf("\n Hieu so cua j tru i la %d",hieu);</para>
          <para id="id6563994">}</para>
          <para id="id6563999">else</para>
          <para id="id6564004">{</para>
          <para id="id6564010">int hieu=i-j; /*Bien ben trong*/</para>
          <para id="id6564021">printf("\n Gia tri cua i tru j la %d",hieu);</para>
          <para id="id6564028">}</para>
          <para id="id6564033">getch();</para>
          <para id="id6564039">return 0;</para>
          <para id="id6564044">}</para>
        </section>
      </section>
      <section id="id-0237948249516">
        <title>Biểu thức</title>
        <para id="id6564065">Biểu thức là một sự kết hợp giữa các toán tử (operator) và các toán hạng (operand) theo đúng một trật tự nhất định.</para>
        <para id="id6564074">Mỗi toán hạng có thể là một hằng, một biến hoặc một biểu thức khác.</para>
        <para id="id6564081">Trong trường hợp, biểu thức có nhiều toán tử, ta dùng cặp dấu ngoặc đơn () để chỉ định toán tử nào được thực hiện trước.</para>
        <para id="id6564091">Ví dụ: Biểu thức nghiệm của phương trình bậc hai: </para>
        <para id="id6564098">(-b + sqrt(Delta))/(2*a)</para>
        <para id="id6564104">Trong đó 2 là hằng; a, b, Delta là biến.</para>
        <section id="id-248361073275">
          <title>Các toán tử số học</title>
          <para id="id6564124">Trong ngôn ngữ C, các toán tử +, -, *, / làm việc tương tự như khi chúng làm việc trong các ngôn ngữ khác. Ta có thể áp dụng chúng cho đa số kiểu dữ liệu có sẵn được cho phép bởi C. Khi ta áp dụng phép / cho một số nguyên hay một ký tự, bất kỳ phần dư nào cũng bị cắt bỏ. Chẳng hạn, 5/2 bằng 2 trong phép chia nguyên.</para>
          <table id="id6564152" summary="">
            <tgroup cols="2">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <tbody>
                <row>
                  <entry>Toán tử</entry>
                  <entry>Ý nghĩa</entry>
                </row>
                <row>
                  <entry>+</entry>
                  <entry>Cộng</entry>
                </row>
                <row>
                  <entry>-</entry>
                  <entry>Trừ</entry>
                </row>
                <row>
                  <entry>*</entry>
                  <entry>Nhân</entry>
                </row>
                <row>
                  <entry>/</entry>
                  <entry>Chia</entry>
                </row>
                <row>
                  <entry>%</entry>
                  <entry>Chia lấy phần dư</entry>
                </row>
                <row>
                  <entry>--</entry>
                  <entry>Giảm 1 đơn vị</entry>
                </row>
                <row>
                  <entry>++</entry>
                  <entry>Tăng 1 đơn vị</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id5912657">Tăng và giảm (++ &amp; --)</para>
          <para id="id5912669">Toán tử ++ thêm 1 vào toán hạng của nó và – trừ bớt 1. Nói cách khác:</para>
          <para id="id5912678">x = x + 1 giống như ++x</para>
          <para id="id5912687">x = x – 1 giống như x—</para>
          <para id="id5912695">Cả 2 toán tử tăng và giảm đều có thể tiền tố (đặt trước) hay hậu tố (đặt sau) toán hạng. Ví dụ:x = x + 1 có thể viết x++ (hay ++x)</para>
          <para id="id5912721">Tuy nhiên giữa tiền tố và hậu tố có sự khác biệt khi sử dụng trong 1 biểu thức. Khi 1 toán tử tăng hay giảm đứng trước toán hạng của nó, C thực hiện việc tăng hay giảm trước khi lấy giá trị dùng trong biểu thức. Nếu toán tử đi sau toán hạng, C lấy giá trị toán hạng trước khi tăng hay giảm nó. Tóm lại:</para>
          <para id="id5912746">x = 10</para>
          <para id="id5912753">y = ++x //y = 11</para>
          <para id="id5912763">Tuy nhiên:</para>
          <para id="id5912770">x = 10</para>
          <para id="id5912778">x = x++ //y = 10</para>
          <para id="id5912785">Thứ tự ưu tiên của các toán tử số học:</para>
          <para id="id5912799">++ -- sau đó là * / % rồi mới đến + -</para>
        </section>
        <section id="id-606464024661">
          <title>Các toán tử quan hệ và các toán tử Logic</title>
          <para id="id5912816">Ý tưởng chính của toán tử quan hệ và toán tử Logic là đúng hoặc sai. Trong C mọi giá trị khác 0 được gọi là đúng, còn sai là 0. Các biểu thức sử dụng các toán tử quan hệ và Logic trả về 0 nếu sai và trả về 1 nếu đúng.</para>
          <table id="id5912832" summary="">
            <tgroup cols="2">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <tbody>
                <row>
                  <entry>Toán tử</entry>
                  <entry>Ý nghĩa</entry>
                </row>
                <row>
                  <entry namest="c1" nameend="c2">Các toán tử quan hệ</entry>
                </row>
                <row>
                  <entry>&gt;</entry>
                  <entry>Lớn hơn</entry>
                </row>
                <row>
                  <entry>&gt;=</entry>
                  <entry>Lớn hơn hoặc bằng</entry>
                </row>
                <row>
                  <entry>&lt;</entry>
                  <entry>Nhỏ hơn</entry>
                </row>
                <row>
                  <entry>&lt;=</entry>
                  <entry>Nhỏ hơn hoặc bằng</entry>
                </row>
                <row>
                  <entry>==</entry>
                  <entry>Bằng</entry>
                </row>
                <row>
                  <entry>!=</entry>
                  <entry>Khác</entry>
                </row>
                <row>
                  <entry namest="c1" nameend="c2">Các toán tử Logic</entry>
                </row>
                <row>
                  <entry>&amp;&amp;</entry>
                  <entry>AND</entry>
                </row>
                <row>
                  <entry>||</entry>
                  <entry>OR</entry>
                </row>
                <row>
                  <entry>!</entry>
                  <entry>NOT</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id5913113">Bảng chân trị cho các toán tử Logic:</para>
          <table id="id5913130" summary="">
            <tgroup cols="5">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <colspec colnum="3" colname="c3"/>
              <colspec colnum="4" colname="c4"/>
              <colspec colnum="5" colname="c5"/>
              <tbody>
                <row>
                  <entry>P</entry>
                  <entry>q</entry>
                  <entry>p&amp;&amp;q</entry>
                  <entry>p||q</entry>
                  <entry>!p</entry>
                </row>
                <row>
                  <entry>0</entry>
                  <entry>0</entry>
                  <entry>0</entry>
                  <entry>0</entry>
                  <entry>1</entry>
                </row>
                <row>
                  <entry>0</entry>
                  <entry>1</entry>
                  <entry>0</entry>
                  <entry>1</entry>
                  <entry>1</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>0</entry>
                  <entry>0</entry>
                  <entry>1</entry>
                  <entry>0</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>1</entry>
                  <entry>1</entry>
                  <entry>1</entry>
                  <entry>0</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id5913413">Các toán tử quan hệ và Logic đều có độ ưu tiên thấp hơn các toán tử số học. Do đó một biểu thức như: 10 &gt; 1+ 12 sẽ được xem là 10 &gt; (1 + 12) và kết quả là sai (0).</para>
          <para id="id5913423">Ta có thể kết hợp vài toán tử lại với nhau thành biểu thức như sau:</para>
          <para id="id5913431">10&gt;5&amp;&amp;!(10&lt;9)||3&lt;=4  Kết quả là đúng</para>
          <para id="id5913441">Thứ tự ưu tiên của các toán tử quan hệ là Logic</para>
          <para id="id5913447">Cao nhất:!</para>
          <para id="id5913455">&gt;&gt;=&lt;&lt;=</para>
          <para id="id5913469">==!=</para>
          <para id="id5913478">&amp;&amp;</para>
          <para id="id5913487">Thấp nhất:||</para>
        </section>
        <section id="id-101430646273">
          <title>Các toán tử Bitwise:</title>
          <para id="id5913503">Các toán tử Bitwise ý nói đến kiểm tra, gán hay sự thay đổi các Bit thật sự trong 1 Byte của Word, mà trong C chuẩn là các kiểu dữ liệu và biến char, int. Ta không thể sử dụng các toán tử Bitwise với dữ liệu thuộc các kiểu float, double, long double, void hay các kiểu phức tạp khác.</para>
          <para id="id5913518"/>
          <table id="id5913522" summary="">
            <tgroup cols="2">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <tbody>
                <row>
                  <entry>Toán tử</entry>
                  <entry>Ý nghĩa</entry>
                </row>
                <row>
                  <entry>&amp;</entry>
                  <entry>AND</entry>
                </row>
                <row>
                  <entry>|</entry>
                  <entry>OR</entry>
                </row>
                <row>
                  <entry>^</entry>
                  <entry>XOR</entry>
                </row>
                <row>
                  <entry>~</entry>
                  <entry>NOT</entry>
                </row>
                <row>
                  <entry>&gt;&gt;</entry>
                  <entry>Dịch phải</entry>
                </row>
                <row>
                  <entry>&lt;&lt;</entry>
                  <entry>Dịch trái</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id5913697">Bảng chân trị của toán tử ^ (XOR)</para>
          <table id="id5913704" summary="">
            <tgroup cols="3">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <colspec colnum="3" colname="c3"/>
              <tbody>
                <row>
                  <entry>p</entry>
                  <entry>q</entry>
                  <entry>p^q</entry>
                </row>
                <row>
                  <entry>0</entry>
                  <entry>0</entry>
                  <entry>0</entry>
                </row>
                <row>
                  <entry>0</entry>
                  <entry>1</entry>
                  <entry>1</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>0</entry>
                  <entry>1</entry>
                </row>
                <row>
                  <entry>1</entry>
                  <entry>1</entry>
                  <entry>0</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="id-466142281616">
          <title>Toán tử ? cùng với :</title>
          <para id="id5913895">C có một toán tử rất mạnh và thích hợp để thay thế cho các câu lệnh của If-Then-Else. Cú pháp của việc sử dụng toán tử ? là:</para>
          <para id="id5913906">E1?E2:E3</para>
          <para id="id5913927">Trong đó E1, E2, E3 là các biểu thức.</para>
          <para id="id5913937">Ý nghĩa: Trước tiên E1 được ước lượng, nếu đúng E2 được ước lượng và nó trở thành giá trị của biểu thức; nếu E1 sai, E2 được ước lượng và trở thành giá trị của biểu thức.</para>
          <para id="id5913960">Ví dụ:</para>
          <para id="id5913976">X = 10</para>
          <para id="id5913983">Y = X &gt; 9 ? 100 : 200</para>
          <para id="id5913990">Thì Y được gán giá trị 100, nếu X nhỏ hơn 9 thì Y sẽ nhận giá trị là 200. Đoạn mã này tương đương cấu trúc if như sau:</para>
          <para id="id5914008">X = 10</para>
          <para id="id5914019">if (X &lt; 9) Y = 100</para>
          <para id="id5914026">else Y = 200</para>
        </section>
        <section id="id-871342273574">
          <title>Toán tử con trỏ &amp; và *</title>
          <para id="id5914040">Một con trỏ là địa chỉ trong bộ nhớ của một biến. Một biến con trỏ là một biến được khai báo riêng để chứa một con trỏ đến một đối tượng của kiểu đã chỉ ra nó. Ta sẽ tìm hiểu kỹ hơn về con trỏ trong chương về con trỏ. Ở đây, chúng ta sẽ đề cập ngắn gọn đến hai toán tử được sử dụng để thao tác với các con trỏ.</para>
          <para id="id5914071">Toán tử thứ nhất là &amp;, là một toán tử quy ước trả về địa chỉ bộ nhớ của hệ số của nó.</para>
          <para id="id5914081">Ví dụ:m = &amp;count</para>
          <para id="id5914100">Đặt vào biến m địa chỉ bộ nhớ của biến count.</para>
          <para id="id5914107">Chẳng hạn, biến count ở vị trí bộ nhớ 2000, giả sử count có giá trị là 100. Sau câu lệnh trên m sẽ nhận giá trị 2000.</para>
          <para id="id5914117">Toán tử thứ hai là *, là một bổ sung cho &amp;; đây là một toán tử quy ước trả về giá trị của biến được cấp phát tại địa chỉ theo sau đó.</para>
          <para id="id5914130">Ví dụ:q = *m</para>
          <para id="id5914150">Sẽ đặt giá trị của count vào q. Bây giờ q sẽ có giá trị là 100 vì 100 được lưu trữ tại địa chỉ 2000.</para>
        </section>
        <section id="id-594968172799">
          <title>Toán tử dấu phẩy ,</title>
          <para id="id5914169">Toán tử dấu , được sử dụng để kết hợp các biểu thức lại với nhau. Bên trái của toán tử dấu , luôn được xem là kiểu void. Điều đó có nghĩa là biểu thức bên phải trở thành giá trị của tổng các biểu thức được phân cách bởi dấu phẩy.</para>
          <para id="id5914185">Ví dụ:x = (y=3,y+1);</para>
          <para id="id5914203">Trước hết gán 3 cho y rồi gán 4 cho x. Cặp dấu ngoặc đơn là cần thiết vì toán tử dấu , có độ ưu tiên thấp hơn toán tử gán.</para>
          <para id="id5914216">Xem các dấu ngoặc đơn và cặp dấu ngoặc vuông là toán tử</para>
          <para id="id5914224">Trong C, cặp dấu ngoặc đơn là toán tử để tăng độ ưu tiên của các biểu thức bên trong nó.</para>
          <para id="id5914234">Các cặp dấu ngoặc vuông thực hiện thao tác truy xuất phần tử trong mảng.</para>
          <para id="id5914242">Tổng kết về độ ưu tiên</para>
          <table id="id5914247" summary="">
            <tgroup cols="2">
              <colspec colnum="1" colname="c1"/>
              <colspec colnum="2" colname="c2"/>
              <tbody>
                <row>
                  <entry>Cao nhất</entry>
                  <entry>() []</entry>
                </row>
                <row>
                  <entry/>
                  <entry>! ~ ++ -- (Kiểu) * &amp;</entry>
                </row>
                <row>
                  <entry/>
                  <entry>* / %</entry>
                </row>
                <row>
                  <entry/>
                  <entry>+ -</entry>
                </row>
                <row>
                  <entry/>
                  <entry>&lt;&lt; &gt;&gt;</entry>
                </row>
                <row>
                  <entry/>
                  <entry>&lt; &lt;= &gt; &gt;=</entry>
                </row>
                <row>
                  <entry/>
                  <entry>&amp;</entry>
                </row>
                <row>
                  <entry/>
                  <entry>^</entry>
                </row>
                <row>
                  <entry/>
                  <entry>|</entry>
                </row>
                <row>
                  <entry/>
                  <entry>&amp;&amp;</entry>
                </row>
                <row>
                  <entry/>
                  <entry>||</entry>
                </row>
                <row>
                  <entry/>
                  <entry>?:</entry>
                </row>
                <row>
                  <entry/>
                  <entry>= += -= *= /=</entry>
                </row>
                <row>
                  <entry>Thấp nhất</entry>
                  <entry>,</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para id="id5914536">VI.2.9 Cách viết tắt trong C</para>
          <para id="id5914542">Có nhiều phép gán khác nhau, đôi khi ta có thể sử dụng viết tắt trong C nữa. Chẳng hạn:</para>
          <para id="id5914551">x = x + 10 được viết thànhx +=10</para>
          <para id="id5914560">Toán tử += báo cho chương trình dịch biết để tăng giá trị của x lên 10.</para>
          <para id="id5914569">Cách viết này làm việc trên tất cả các toán tử nhị phân (phép toán hai ngôi) của C. Tổng quát:</para>
          <para id="id5914578">(Biến) = (Biến)(Toán tử)(Biểu thức)</para>
          <para id="id5914597">có thể được viết:</para>
          <para id="id5914603">(Biến)(Toán tử)=(Biểu thức)</para>
        </section>
      </section>
    </section>
    <section id="id-728164732345">
      <title>CẤU TRÚC CỦA MỘT CHƯƠNG TRÌNH C </title>
      <section id="id-327611779837">
        <title>Tiền xử lý và biên dịch</title>
        <para id="id5914651">Trong C, việc dịch (translation) một tập tin nguồn được tiến hành trên hai bước hoàn toàn độc lập với nhau:</para>
        <para id="id6255914">- Tiền xử lý.</para>
        <para id="id6255921">- Biên dịch. </para>
        <para id="id6255929">Hai bước này trong phần lớn thời gian được nối tiếp với nhau một cách tự động theo cách thức mà ta có ấn tượng rằng nó đã được thực hiện như là một xử lý duy nhất. Nói chung, ta thường nói đến việc tồn tại của một bộ tiền xử lý (preprocessor?) nhằm chỉ rõ chương trình thực hiện việc xử lý trước. Ngược lại, các thuật ngữ trình biên dịch hay sự biên dịch vẫn còn nhập nhằng bởi vì nó chỉ ra khi thì toàn bộ hai giai đoạn, khi thì lại là giai đoạn thứ hai. </para>
        <para id="id6255946">Bước tiền xử lý tương ứng với việc cập nhật trong văn bản của chương trình nguồn, chủ yếu dựa trên việc diễn giải các mã lệnh rất đặc biệt gọi là các chỉ thị dẫn hướng của bộ tiền xử lý (destination directive of preprocessor); các chỉ thị này được nhận biết bởi chúng bắt đầu bằng ký hiệu (symbol) #. </para>
        <para id="id6255963">Hai chỉ thị quan trọng nhất là: </para>
        <para id="id6255972">- Chỉ thị sự gộp vào của các tập tin nguồn khác: #include </para>
        <para id="id6255982">- Chỉ thị việc định nghĩa các macros hoặc ký hiệu: #define </para>
        <para id="id6255992">Chỉ thị đầu tiên được sử dụng trước hết là nhằm gộp vào nội dung của các tập tin cần có (header file), không thể thiếu trong việc sử dụng một cách tốt nhất các hàm của thư viện chuẩn, phổ biến nhất là: </para>
        <para id="id6256008">#include &lt;stdio.h&gt; </para>
        <para id="id6256016">Chỉ thị thứ hai rất hay được sử dụng trong các tập tin thư viện (header file) đã được định nghĩa trước đó và thường được khai thác bởi các lập trình viên trong việc định nghĩa các ký hiệu như là: </para>
        <para id="id6256032">#define NB_COUPS_MAX 100</para>
        <para id="id6256040">#define SIZE 25</para>
      </section>
      <section id="id-176072014772">
        <title>Cấu trúc một chương trình C</title>
        <para id="id6256056">Một chương trình C bao gồm các phần như: Các chỉ thị tiền xử lý, khai báo biến ngoài, các hàm tự tạo, chương trình chính (hàm main).</para>
        <para id="id6256078">Cấu trúc có thể như sau:</para>
        <para id="id6256086">Các chỉ thị tiền xử lý (Preprocessor directives)#include &lt;Tên tập tin thư viện&gt;#define ….</para>
        <para id="id6256125">Định nghĩa kiểu dữ liệu (phần này không bắt buộc): dùng để đặt tên lại cho một kiểu dữ liệu nào đó để gợi nhớ hay đặt 1 kiểu dữ liệu cho riêng mình dựa trên các kiểu dữ liệu đã có.Cú pháp: typedef &lt;Tên kiểu cũ&gt; &lt;Tên kiểu mới&gt;Ví dụ: typedef int SoNguyen; // Kiểu SoNguyen là kiểu int</para>
        <para id="id6256217">Khai báo các prototype (tên hàm, các tham số, kiểu kết quả trả về,… của các hàm sẽ cài đặt trong phần sau, phần này không bắt buộc): phần này chỉ là các khai báo đầu hàm, không phải là phần định nghĩa hàm.</para>
        <para id="id6256262">Khai báo các biến ngoài (các biến toàn cục) phần này không bắt buộc: phần này khai báo các biến toàn cục được sử dụng trong cả chương trình.</para>
        <para id="id6256307">Chương trình chính phần này bắt buộc phải có&lt;Kiểu dữ liệu trả về&gt; main(){Các khai báo cục bộ trong hàm main: Các khai báo này chỉ tồn tại trong hàm mà thôi, có thể là khai báo biến hay khai báo kiểu.Các câu lệnh dùng để định nghĩa hàm mainreturn &lt;kết quả trả về&gt;; // Hàm phải trả về kết quả}</para>
        <para id="id6256393">Cài đặt các hàm&lt;Kiểu dữ liệu trả về&gt; function1( các tham số){Các khai báo cục bộ trong hàm.Các câu lệnh dùng để định nghĩa hàmreturn &lt;kết quả trả về&gt;;}…</para>
        <para id="id6256462">Lưu ý: Một số tập tin header thường dùng:</para>
        <para id="id6256468">Một chương trình C bắt đầu thực thi từ hàm main (thông thường là từ câu lệnh đầu tiên đến câu lệnh cuối cùng).</para>
      </section>
      <section id="id-687865416428">
        <title>Các tập tin thư viện thông dụng</title>
        <para id="id6256486">Đây là các tập tin chứa các hàm thông dụng khi lập trinh C, muốn sử dụng các hàm trong các tập tin header này thì phải khai báo #include &lt;Tên tập tin&gt; ở phần đầu của chương trình</para>
        <para id="id6256499">1) stdio.h: Tập tin định nghĩa các hàm vào/ra chuẩn (standard input/output). Gồm các hàm in dữ liệu (printf()), nhập giá trị cho biến (scanf()), nhận ký tự từ bàn phím (getc()), in ký tự ra màn hình (putc()), nhận một dãy ký tự từ bàm phím (gets()), in chuỗi ký tự ra màn hình (puts()), xóa vùng đệm bàn phím (fflush()), fopen(), fclose(), fread(), fwrite(), getchar(), putchar(), getw(), putw()…</para>
        <para id="id6256531">2) conio.h : Tập tin định nghĩa các hàm vào ra trong chế độ DOS (DOS console). Gồm các hàm clrscr(), getch(), getche(), getpass(), cgets(), cputs(), putch(), clreol(),…</para>
        <para id="id6256550">3) math.h: Tập tin định nghĩa các hàm tính toán gồm các hàm abs(), sqrt(), log(). log10(), sin(), cos(), tan(), acos(), asin(), atan(), pow(), exp(),…</para>
        <para id="id6256567">4) alloc.h: Tập tin định nghĩa các hàm liên quan đến việc quản lý bộ nhớ. Gồm các hàm calloc(), realloc(), malloc(), free(), farmalloc(), farcalloc(), farfree(), …</para>
        <para id="id6256585">5) io.h: Tập tin định nghĩa các hàm vào ra cấp thấp. Gồm các hàm open(), _open(), read(), _read(), close(), _close(), creat(), _creat(), creatnew(), eof(), filelength(), lock(),…</para>
        <para id="id6256603">6) graphics.h: Tập tin định nghĩacác hàm liên quan đến đồ họa. Gồm initgraph(), line(), circle(), putpixel(), getpixel(), setcolor(), …</para>
        <para id="id6256622">Còn nhiều tập tin khác nữa.</para>
      </section>
      <section id="id-305161941659">
        <title>Cú pháp khai báo các phần bên trong môt chương trình C</title>
        <section id="id-822352331371">
          <title>Chỉ thị #include để sử dụng tập tin thư viện</title>
          <para id="id6256653">Cú pháp:</para>
          <para id="id6256658">#include &lt;Tên tập tin&gt; // Tên tập tin được đạt trong dấu &lt;&gt;</para>
          <para id="id6256669">hay #include “Tên đường dẫn”</para>
          <para id="id6256684">Menu Option của Turbo C có mục INCLUDE DIRECTORIES, mục này dùng để chỉ định các tập tin thư viện được lưu trữ trong thư mục nào.</para>
          <para id="id6256694">Nếu ta dùng #include&lt;Tên tập tin&gt; thì Turbo C sẽ tìm tập tin thư viện trong thư mục đã được xác định trong INCLUDE DIRECTORIES.</para>
          <para id="id6256703">Ví dụ: include &lt;stdio.h&gt;</para>
          <para id="id6256716">Nếu ta dùng #include”Tên đường dẫn” thì ta phải chỉ rõ tên ở đâu, tên thư mục và tập tin thư viện.</para>
          <para id="id6256724">Ví dụ:#include”C:\\TC\\math.h”</para>
          <para id="id6256739">Trong trường hợp tập tin thư viện nằm trong thư mục hiện hành thì ta chỉ cần đưa tên tập tin thư viện. Ví dụ: #include”math.h”.</para>
          <para id="id6256750">Ví dụ:</para>
          <para id="id6256762">#include &lt;stdio.h&gt;</para>
          <para id="id6256766">#include &lt;conio.h&gt;</para>
          <para id="id6256771">#include “math.h”</para>
        </section>
        <section id="id-241359128303">
          <title>Chỉ thị #define để định nghĩa hằng số</title>
          <para id="id6256789">Cú pháp:</para>
          <para id="id6256800">#define &lt;Tên hằng&gt; &lt;Giá trị&gt;</para>
          <para id="id6256816">Ví dụ:</para>
          <para id="id6256827">#define MAXINT 32767</para>
        </section>
        <section id="id-858980814024">
          <title>Khai báo các prototype của hàm</title>
          <para id="id6256848">Cú pháp:</para>
          <para id="id6256859">&lt;Kiểu kết quả trả về&gt; Tên hàm (danh sách đối số)</para>
          <para id="id6256873">Ví dụ:</para>
          <para id="id6256885">long giaithua( int n); //Hàm tính giai thừa của số nguyên n</para>
          <para id="id6256893">double x_mu_y(float x, float y);/*Hàm tính x mũ y*/</para>
        </section>
        <section id="id-754144882681">
          <title>Cấu trúc của hàm “bình thường”</title>
          <para id="id6256916">Cú pháp:</para>
          <para id="id6256928">&lt;Kiểu kết quả trả về&gt; Tên hàm (các đối số)</para>
          <para id="id6256942">{</para>
          <para id="id6256946">Các khai báo và các câu lệnh định nghĩa hàm</para>
          <para id="id6256956">return kết quả;</para>
          <para id="id6256970">}</para>
          <para id="id6256975">Ví dụ:</para>
          <para id="id6256986">int tong(int x, int y) /*Hàm tính tổng 2 số nguyên*/</para>
          <para id="id6257000">{</para>
          <para id="id6257004">return (x+y);</para>
          <para id="id6257010">}</para>
          <para id="id6257014">float tong(float x, float y) /*Hàm tính tổng 2 số thực*/</para>
          <para id="id6257024">{</para>
          <para id="id6257028">return (x+y);</para>
          <para id="id6257034">}</para>
        </section>
        <section id="id-891558913428">
          <title>Cấu trúc của hàm main</title>
          <para id="id6257047">Hàm main chính là chương trình chính, gồm các lệnh xử lý, các lời gọi các hàm khác.</para>
          <para id="id6257055">Cú pháp:</para>
          <para id="id6257066">&lt;Kết quả trả về&gt; main( đối số)</para>
          <para id="id6257078">{</para>
          <para id="id6257082">Các khai báo và các câu lệnh định nghĩa hàm</para>
          <para id="id6257092">return &lt;kết quả&gt;;</para>
          <para id="id6257102">}</para>
          <para id="id6257106">Ví dụ 1:</para>
          <para id="id6257118">int main()</para>
          <para id="id6257125">{</para>
          <para id="id6257129">printf(“Day la chuong trinh chinh”);</para>
          <para id="id6257136">getch();</para>
          <para id="id6257141">return 0;</para>
          <para id="id6257147">}</para>
          <para id="id6257158">Ví dụ 2:</para>
          <para id="id6257170">int main()</para>
          <para id="id6257177">{</para>
          <para id="id6257181">int a=5, b=6,c;</para>
          <para id="id6257187">float x=3.5, y=4.5,z;</para>
          <para id="id6257197">printf(“Day la chuong trinh chinh”);</para>
          <para id="id6257202">c=tong(a,b);</para>
          <para id="id6257207">printf(“\n Tong cua %d va %d la %d”,a,b,c);</para>
          <para id="id6257213">z=tong(x,y);</para>
          <para id="id6257217">printf(“\n Tong cua %f và %f là %f”, x,y,z);</para>
          <para id="id6257223">getch();</para>
          <para id="id6257229">return 0;</para>
          <para id="id6257234">}</para>
        </section>
      </section>
    </section>
    <section id="id-725322302105">
      <title>BÀI TẬP</title>
      <para id="id6257249">Bài 1: Biểu diễn các hằng số nguyên 2 byte sau đây dưới dạng số nhị phân, bát phân, thập lục phân</para>
      <para id="id6257264">a)12b) 255c) 31000d) 32767e) -32768</para>
      <para id="id6257281">Bài 2: Biểu diễn các hằng ký tự sau đây dưới dạng số nhị phân, bát phân.</para>
      <para id="id6257295">a) ‘A’b) ’a’c) ‘Z’d) ’z’</para>
    </section>
  </content>
</document>